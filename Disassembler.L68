00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 11/28/2016 11:20:31 PM

00000000                             1  *----------------------------------------------------------------------------------------------------
00000000                             2  * Title      : I/O & Op-Code & EA
00000000                             3  * Written by : Hyeon Hong
00000000                             4  * Date       : 12/14/2016
00000000                             5  * Description: -------------------------------------------------------------------------------k
00000000                             6  *----------------------------------------------------------------------------------------------------
00000000                             7  
00000000                             8  *D6 and A6 is set, prior to calling this Macro
00000000                             9  val_check   MACRO
00000000                            10              MOVE.L      #$FF000000,D5
00000000                            11              MOVE.L      #24,D7
00000000                            12              CLR.L       D4
00000000                            13  val_loop\@  MOVE.L      D6,D1               *D6 holds the original hex-value
00000000                            14              AND.L       D5,D1
00000000                            15              LSR.L       D7,D1               *shift bits to the right
00000000                            16  
00000000                            17              CMPI.B      #$30,D1             * D1 < $30 (0 in hex)
00000000                            18              BLT         invalid
00000000                            19              CMPI.B      #$66,D1             * D1 > $66 (f in hex)
00000000                            20              BGT         invalid
00000000                            21              CMPI.B      #$61,D1             * D1 >= $61 (a in hex)
00000000                            22              BGE         lowercase\@
00000000                            23              CMPI.B      #$46,D1             * D1 > $46 (F in hex)
00000000                            24              BGT         invalid
00000000                            25              CMPI.B      #$39,D1             * D1 <= $39 (9 in hex)
00000000                            26              BLE         passed\@
00000000                            27              CMPI.B      #$41,D1             * D1 < $41  (A in hex)
00000000                            28              BLT         invalid
00000000                            29  lowercase\@ CMPI.B      #$46,D1
00000000                            30              BLE         passed\@
00000000                            31              SUBI.B      #$20,D1
00000000                            32  passed\@    CMPI.B      #$39,D1
00000000                            33              BLE         to_hex\@
00000000                            34              SUBI.B      #$7,D1
00000000                            35  to_hex\@    SUBI.B      #$30,D1
00000000                            36              ADDQ.B      #1,D4
00000000                            37              ANDI.L      #$00000001,D4
00000000                            38              CMPI.B      #0,D4               *Is D4 even or odd?
00000000                            39              BEQ         even_num\@
00000000                            40              MOVE.B      D1,D2
00000000                            41              BRA         hex_next\@
00000000                            42  even_num\@  LSL.B       #4,D2
00000000                            43              MOVE.B      D1,D3
00000000                            44              OR.B        D2,D3
00000000                            45              MOVE.B      D3,(A6)+            *A6 is set up as the pointer to which data will be written
00000000                            46  hex_next\@  LSR.L       #8,D5
00000000                            47              SUBQ.B      #8,D7
00000000                            48              CMPI.B      #0,D7
00000000                            49              BGE         val_loop\@
00000000                            50              ENDM
00000000                            51  
00000000                            52  
00000000                            53  *convert reg_digits to ascii-hex and write to the buffer
00000000                            54  xreg2ascii  MACRO
00000000                            55              MOVE.B      #$44,(A1)+          *write the ascii-hex value of 'D' into the buffer
00000000                            56              MOVE.W      D0,D1
00000000                            57              ANDI.W      #%0000111000000000,D1
00000000                            58              LSR.W       #8,D1
00000000                            59              LSR.W       #1,D1
00000000                            60              ADDI.B      #$30,D1
00000000                            61              MOVE.B      D1,(A1)+            *write the ascii-hex value into the buffer
00000000                            62              ENDM
00000000                            63  
00000000                            64  yreg2ascii  MACRO
00000000                            65              MOVE.B      #$44,(A1)+          *write the ascii-hex value of 'D' into the buffer
00000000                            66              MOVE.W      D0,D1
00000000                            67              ANDI.W      #%0000000000000111,D1
00000000                            68              ADDI.B      #$30,D1
00000000                            69              MOVE.B      D1,(A1)+            *write the ascii-hex value into the buffer
00000000                            70              ENDM
00000000                            71              
00000000                            72  oreg2ascii  MACRO
00000000                            73              MOVE.W      D0,D1
00000000                            74              ANDI.W      #%0000111000000000,D1
00000000                            75              LSR.W       #8,D1
00000000                            76              LSR.W       #1,D1
00000000                            77              ADDI.B      #$30,D1
00000000                            78              MOVE.B      D1,(A1)+            *write the ascii-hex value into the buffer
00000000                            79              ENDM
00000000                            80  
00000000                            81  add2ascii   MACRO
00000000                            82              MOVE.W      #$F000,D5
00000000                            83              MOVE.L      #12,D7
00000000                            84  ad2ascii\@  MOVE.W      D6,D1               *D6 holds the original hex-value
00000000                            85              AND.W       D5,D1
00000000                            86              LSR.W       D7,D1               *shift 12 bits to the right
00000000                            87              CMPI.W      #9,D1
00000000                            88              BLE         adnumbers\@
00000000                            89              ADDI.W      #$7,D1
00000000                            90  adnumbers\@ ADDI.W      #$30,D1
00000000                            91              MOVE.B      D1,(A1)+          *write the ascii-hex equivalent of hex-character to the buffer
00000000                            92              LSR.W       #4,D5
00000000                            93              SUBQ.B      #4,D7
00000000                            94              CMPI.B      #0,D7
00000000                            95              BGE         ad2ascii\@
00000000                            96              ENDM
00000000                            97  
00000000                            98  *convert D1.W (hex-value) to the ascii-hex in D6 and write it into the buffer
00000000                            99  w_2ascii    MACRO
00000000                           100              MOVE.W      #$F000,D4           *D4 - ANDING pattern
00000000                           101              MOVE.L      #12,D7
00000000                           102  ascii_w\@   MOVE.W      D1,D6
00000000                           103              AND.W       D4,D6
00000000                           104              LSR.W       D7,D6               *shift bits to the right
00000000                           105              CMPI.W      #9,D6
00000000                           106              BLE         numbers_w\@
00000000                           107              ADDI.B      #$7,D6
00000000                           108  numbers_w\@ ADDI.B      #$30,D6
00000000                           109              MOVE.B      D6,(A1)+          *write the ascii-hex equivalent of hex-value to the buffer
00000000                           110              LSR.W       #4,D4
00000000                           111              SUBQ.B      #4,D7
00000000                           112              CMPI.B      #0,D7
00000000                           113              BGE         ascii_w\@
00000000                           114              ENDM
00000000                           115              
00000000                           116  *convert D1.L (hex-value) to the ascii-hex and write into the buffer
00000000                           117  l_2ascii    MACRO
00000000                           118              MOVE.L      #$F0000000,D4       *D4 - ANDING pattern
00000000                           119              MOVE.L      #28,D7
00000000                           120  ascii_l\@   MOVE.L      D1,D6
00000000                           121              AND.L       D4,D6
00000000                           122              LSR.L       D7,D6               *shift bits to the right
00000000                           123              CMPI.B      #9,D6
00000000                           124              BLE         numbers_l\@
00000000                           125              ADDI.B      #$7,D6
00000000                           126  numbers_l\@ ADDI.B      #$30,D6
00000000                           127              MOVE.B      D6,(A1)+          *write the ascii-hex equivalent of hex-value to the buffer
00000000                           128              LSR.L       #4,D4
00000000                           129              SUBQ.B      #4,D7
00000000                           130              CMPI.B      #0,D7
00000000                           131              BGE         ascii_l\@
00000000                           132              ENDM
00000000                           133  
00000000                           134  
00000000                           135  parsing_1   MACRO
00000000                           136              MOVE.B      (A0)+,D0
00000000                           137              MOVE.B      D0,D1               *D1 - register #
00000000                           138              MOVE.B      D0,D5               *D5 - mode
00000000                           139              ANDI.B      #%00111000,D5
00000000                           140              LSR.B       #3,D5
00000000                           141              ANDI.B      #%00000111,D1
00000000                           142              MOVE.B      D5,D3               *D3 - back-up
00000000                           143              MOVE.B      D1,D4               *D4 - back-up
00000000                           144              ADDA.W      (A2),A0             *add exception flag value to the memory pointer
00000000                           145              ENDM
00000000                           146              
00000000                           147  parsing_2   MACRO
00000000                           148              MOVE.W      D0,D1
00000000                           149              ANDI.W      #%0000111000000000,D1
00000000                           150              LSR.W       #8,D1
00000000                           151              LSR.W       #1,D1
00000000                           152              MOVE.W      D0,D2
00000000                           153              ANDI.W      #%0000000111000000,D2
00000000                           154              LSR.W       #6,D2
00000000                           155              MOVE.W      D0,D3
00000000                           156              ANDI.W      #%0000000000111000,D3
00000000                           157              LSR.W       #3,D3
00000000                           158              MOVE.W      D0,D4
00000000                           159              ANDI.W      #%0000000000000111,D4
00000000                           160              ENDM
00000000                           161  
00000000                           162  
00000000                           163  
00000000  =00001000                164  pgm_start   EQU         $1000               *Program runs here
00000000  =000A0000                165  stack       EQU         $A0000              *Put stack here
00000000                           166  
00000000                           167          
00001000                           168              ORG         pgm_start           *Program Origin
00001000  4FF9 000A0000            169              LEA         stack, SP           *Initialize the stack pointer
00001006  4BF9 00002A3C            170              LEA         which_add,A5
0000100C                           171              
0000100C                           172  
0000100C                           173  
0000100C  1ABC 0000                174  beginning   MOVE.B      #0,(A5)             *Take the user input for start address
00001010  6100 00A8                175              BSR         io_code
00001014  1ABC 0001                176              MOVE.B      #1,(A5)             *Take the user input for end address
00001018  6100 00A0                177              BSR         io_code
0000101C                           178  
0000101C  43F9 000026CA            179              LEA         newline,A1
00001022  103C 000D                180              MOVE.B      #13,D0
00001026  4E4F                     181              TRAP        #15            
00001028                           182              
00001028                           183              *assign the start & end address to A0 & A4                        
00001028  49F9 000029EC            184              LEA         start_addr,A4
0000102E  2014                     185              MOVE.L     (A4),D0
00001030  2A40                     186              MOVEA.L     D0,A5            
00001032  41D5                     187              LEA         (A5),A0             *A0 - start address
00001034  4BF9 00002A14            188              LEA         end_addr,A5
0000103A  2015                     189              MOVE.L     (A5),D0
0000103C  2C40                     190              MOVEA.L     D0,A6
0000103E  49D6                     191              LEA         (A6),A4             *A4 - end address
00001040                           192  
00001040  43F9 00002A40            193              LEA         buffer,A1           *A1 - pointer to the buffer
00001046                           194  
00001046  6100 02D2                195  op_loop     BSR         op_code
0000104A                           196              *print to console
0000104A  43F9 00002A40            197              LEA         buffer,A1           *Reset the buffer pointer
00001050  103C 000D                198              MOVE.B      #13,D0
00001054  4E4F                     199              TRAP        #15
00001056                           200              
00001056  B9C8                     201              CMPA.L      A0,A4
00001058  6EEC                     202              BGT         op_loop
0000105A                           203  
0000105A  43F9 000026CA            204              LEA         newline,A1
00001060  103C 000D                205              MOVE.B      #13,D0
00001064  4E4F                     206              TRAP        #15
00001066                           207              
00001066  43F9 00002662            208              LEA         string8,A1
0000106C  103C 000D                209              MOVE.B      #13,D0
00001070  4E4F                     210              TRAP        #15
00001072                           211  
00001072  43F9 000026CA            212              LEA         newline,A1
00001078  103C 000D                213              MOVE.B      #13,D0
0000107C  4E4F                     214              TRAP        #15
0000107E                           215              
0000107E  43F9 00002698            216              LEA         string9,A1
00001084  103C 000E                217              MOVE.B      #14,D0
00001088  4E4F                     218              TRAP        #15
0000108A                           219              
0000108A  43F9 000026CC            220              LEA         reader,A1
00001090  103C 0002                221              MOVE.B      #2,D0
00001094  4E4F                     222              TRAP        #15
00001096                           223              
00001096  0C41 0001                224              CMPI.W      #1,D1
0000109A  6600 FF70                225              BNE         beginning
0000109E  1E11                     226              MOVE.B      (A1),D7
000010A0  0C07 0071                227              CMPI.B      #$71,D7
000010A4  6700 000A                228              BEQ         the_end
000010A8  0C07 0051                229              CMPI.B      #$51,D7
000010AC  6600 FF5E                230              BNE         beginning            
000010B0                           231  
000010B0  103C 0009                232  the_end     MOVE.B      #9,D0               *halt console simulator
000010B4  4E4F                     233              TRAP        #15
000010B6  4E72 2700                234              STOP        #$2700
000010BA                           235  
000010BA                           236  
000010BA                           237              
000010BA                           238  
000010BA                           239  *****************************************************************************************************
000010BA                           240  * Subroutine I/O Code
000010BA                           241  
000010BA                           242  
000010BA                           243              
000010BA  48E7 FFFE                244  io_code     MOVEM.L     A0-A6/D0-D7,-(SP)   *Save the working registers on stack
000010BE  4BF9 00002A3C            245              LEA         which_add,A5
000010C4                           246  
000010C4  0C15 0000                247  ask_start   CMPI.B      #0,(A5)
000010C8  6600 000C                248              BNE         end_chosen1
000010CC  43F9 000024B8            249              LEA         string1,A1          *start address chosen
000010D2  6000 0008                250              BRA         ask_next
000010D6  43F9 000024DE            251  end_chosen1 LEA         string2,A1          *end address chosen
000010DC  103C 000E                252  ask_next    MOVE.B      #14,D0
000010E0  4E4F                     253              TRAP        #15
000010E2  43F9 000026CC            254              LEA         reader,A1
000010E8  103C 0002                255              MOVE.B      #2,D0
000010EC  4E4F                     256              TRAP        #15
000010EE                           257  
000010EE  0C41 0008                258              CMPI.W      #8,D1
000010F2  6D00 01A4                259              BLT         too_short                   * if ( D1 < 8) length is too short
000010F6  6E00 01E2                260              BGT         too_long                    * if ( D1 > 8) length is too long
000010FA                           261  
000010FA                           262              * validity check + conversion to hex + writing to memory variable (start_addr & end_addr)
000010FA  45F9 000026CC            263  val_start   LEA         reader,A2
00001100  0C15 0000                264              CMPI.B      #0,(A5)
00001104  6600 000C                265              BNE         end_chosen2
00001108  4DF9 000029EC            266              LEA         start_addr,A6       *start address chosen
0000110E  6000 0008                267              BRA         val_next
00001112  4DF9 00002A14            268  end_chosen2 LEA         end_addr,A6         *end address chosen
00001118  241A                     269  val_next    MOVE.L      (A2)+,D2            * temporarily hold the ascii-hex value in D2
0000111A  2C02                     270              MOVE.L      D2,D6
0000111C                           271m             val_check
0000119E  241A                     272              MOVE.L      (A2)+,D2
000011A0  2C02                     273              MOVE.L      D2,D6
000011A2                           274m             val_check
00001224                           275              
00001224                           276              * even boundary check and converting the address to even number
00001224  0C15 0000                277              CMPI.B      #0,(A5)
00001228  6600 000C                278              BNE         end_chosen3
0000122C  4DF9 000029EC            279              LEA         start_addr,A6       *start address chosen
00001232  6000 0008                280              BRA         bound_next
00001236  4DF9 00002A14            281  end_chosen3 LEA         end_addr,A6         *end address chosen
0000123C  2E16                     282  bound_next  MOVE.L      (A6),D7
0000123E  0287 00000001            283              ANDI.L      #$00000001,D7       *Is it even or not?
00001244  0C07 0000                284              CMPI.B      #0,D7
00001248  6700 0018                285              BEQ         range_check
0000124C  0C15 0000                286              CMPI.B      #0,(A5)             *if it's end address, move to range check
00001250  6600 0010                287              BNE         range_check            
00001254  5396                     288              SUBI.L      #1,(A6)             *convert the address to even number
00001256  43F9 000025D0            289              LEA         string6,A1
0000125C  103C 000D                290              MOVE.B      #13,D0
00001260  4E4F                     291              TRAP        #15
00001262                           292  
00001262                           293              * memory range check
00001262  2E16                     294  range_check MOVE.L      (A6),D7
00001264  0287 11000000            295              ANDI.L      #$11000000,D7
0000126A  0C87 00000000            296              CMPI.L      #0,D7
00001270  6600 0088                297              BNE         out_of_rang
00001274                           298  
00001274                           299              *legality check - end address should be greater or equal to start address
00001274  0C15 0000                300  legal_check CMPI.B      #0,(A5)
00001278  6700 0018                301              BEQ         exit_io
0000127C  4DF9 000029EC            302              LEA         start_addr,A6
00001282  2416                     303              MOVE.L      (A6),D2
00001284  4DF9 00002A14            304              LEA         end_addr,A6
0000128A  2616                     305              MOVE.L      (A6),D3
0000128C  9682                     306              SUB.L       D2,D3
0000128E  6B00 007A                307              BMI         illegal
00001292                           308  
00001292  4CDF 7FFF                309  exit_io     MOVEM.L     (SP)+, A0-A6/D0-D7  *Restore the working registers from stack
00001296  4E75                     310              RTS
00001298                           311              
00001298                           312              
00001298                           313  
00001298  0C41 0000                314  too_short   CMPI.W      #0,D1
0000129C  6700 FE26                315              BEQ         ask_start
000012A0  45F9 000026CC            316              LEA         reader,A2
000012A6  47F9 0000285C            317              LEA         reader2,A3
000012AC  7408                     318              MOVE.L      #8,D2
000012AE  9441                     319              SUB.W       D1,D2
000012B0  4283                     320              CLR.L       D3                  *counter for 0 adder
000012B2  16FC 0030                321  z_adder     MOVE.B      #$30,(A3)+          *write the ascii-hex value of '0' into the reader2
000012B6  5203                     322              ADDQ.B      #1,D3
000012B8  B642                     323              CMP.W       D2,D3
000012BA  6DF6                     324              BLT         z_adder
000012BC  4283                     325              CLR.L       D3                  *counter for r_copy
000012BE  16DA                     326  r_copy      MOVE.B      (A2)+,(A3)+         *write the contents of reader into the reader2
000012C0  5203                     327              ADDQ.B      #1,D3
000012C2  B641                     328              CMP.W       D1,D3
000012C4  6DF8                     329              BLT         r_copy
000012C6                           330  
000012C6                           331              *copy the contents in reader2 to reader
000012C6  45F9 000026CC            332              LEA         reader,A2
000012CC  47F9 0000285C            333              LEA         reader2,A3
000012D2  24DB                     334              MOVE.L      (A3)+,(A2)+         *copy 2 Long words
000012D4  24DB                     335              MOVE.L      (A3)+,(A2)+
000012D6  6000 FE22                336              BRA         val_start
000012DA                           337  
000012DA                           338  
000012DA  43F9 00002502            339  too_long    LEA         string3,A1
000012E0  103C 000D                340              MOVE.B      #13,D0
000012E4  4E4F                     341              TRAP        #15
000012E6  6000 FDDC                342              BRA         ask_start
000012EA  43F9 00002542            343  invalid     LEA         string4,A1
000012F0  103C 000D                344              MOVE.B      #13,D0
000012F4  4E4F                     345              TRAP        #15
000012F6  6000 FDCC                346              BRA         ask_start
000012FA  43F9 00002588            347  out_of_rang LEA         string5,A1
00001300  103C 000D                348              MOVE.B      #13,D0
00001304  4E4F                     349              TRAP        #15
00001306  6000 FDBC                350              BRA         ask_start
0000130A  43F9 00002612            351  illegal     LEA         string7,A1
00001310  103C 000D                352              MOVE.B      #13,D0
00001314  4E4F                     353              TRAP        #15
00001316  6000 FDAC                354              BRA         ask_start
0000131A                           355  
0000131A                           356  ****************************************************************************            
0000131A                           357  
0000131A                           358  
0000131A                           359  
0000131A                           360  
0000131A                           361  *****************************************************************************************************
0000131A                           362  * Subroutine Op-Code
0000131A                           363  
0000131A  48E7 FF3E                364  op_code     MOVEM.L     A2-A6/D0-D7,-(SP)   *Save the working registers on stack
0000131E  4DF9 00001E96            365              LEA         case_1,A6           *Set up A6 as the pointer to the instruction table
00001324  4BF9 00001EB2            366              LEA         case_2,A5
0000132A  49F9 00002B08            367              LEA         exception,A4
00001330  22FC 20202020            368              MOVE.L      #$20202020,(A1)+    *write '    ' of ascii-hex into the buffer
00001336  2008                     369              MOVE.L      A0,D0
00001338  2C00                     370              MOVE.L      D0,D6               *D6 holds the original hex-value and will be used in the below MACRO
0000133A  E08E                     371              LSR.L       #8,D6
0000133C  E08E                     372              LSR.L       #8,D6
0000133E                           373m             add2ascii
00001364  3C00                     374              MOVE.W      D0,D6               *D6 holds the original hex-value and will be used in the below MACRO
00001366                           375m             add2ascii
0000138C  22FC 20202020            376              MOVE.L      #$20202020,(A1)+    *write '    ' of ascii-hex into the buffer
00001392                           377  
00001392                           378  
00001392  3018                     379              MOVE.W      (A0)+,D0
00001394  B056                     380  loop_1      CMP.W       (A6),D0
00001396  6700 00D8                381              BEQ         to_buffer_1
0000139A  DDFC 0000000E            382              ADDA.L      #14,A6              *Move to next row
000013A0  BDCD                     383              CMPA.L      A5,A6
000013A2  66F0                     384              BNE         loop_1
000013A4  3200                     385  loop_2      MOVE.W      D0,D1               *To modify the value, copy D0 to D1
000013A6  0241 FFF8                386              ANDI.W      #%1111111111111000,D1
000013AA  B256                     387              CMP.W       (A6),D1
000013AC  6700 00CC                388              BEQ         to_buffer_2
000013B0  DDFC 0000000E            389              ADDA.L      #14,A6              *Move to next row
000013B6  4BF9 000020E2            390  loop_3      LEA         case_4,A5
000013BC  3200                     391              MOVE.W      D0,D1
000013BE  0241 FFC0                392              ANDI.W      #%1111111111000000,D1
000013C2  B256                     393              CMP.W       (A6),D1
000013C4  6700 00D2                394              BEQ         to_buffer_3
000013C8  DDFC 0000000E            395              ADDA.L      #14,A6              *Move to next row
000013CE  BDCD                     396              CMPA.L      A5,A6
000013D0  66E4                     397              BNE         loop_3
000013D2  4BF9 00002304            398  loop_4      LEA         case_5,A5
000013D8  3200                     399              MOVE.W      D0,D1
000013DA  0241 F1C0                400              ANDI.W      #%1111000111000000,D1
000013DE  B256                     401              CMP.W       (A6),D1
000013E0  6700 0300                402              BEQ         to_buffer_4
000013E4  DDFC 0000000E            403              ADDA.L      #14,A6              *Move to next row
000013EA  BDCD                     404              CMPA.L      A5,A6
000013EC  66E4                     405              BNE         loop_4            
000013EE  3200                     406  loop_5      MOVE.W      D0,D1
000013F0  0241 FF00                407              ANDI.W      #%1111111100000000,D1
000013F4  B256                     408              CMP.W       (A6),D1
000013F6  6700 0394                409              BEQ         to_buffer_5
000013FA  DDFC 0000000E            410              ADDA.L      #14,A6              *Move to next row
00001400  4BF9 0000248C            411  loop_6      LEA         case_7,A5
00001406  3200                     412              MOVE.W      D0,D1
00001408  0241 F1F8                413              ANDI.W      #%1111000111111000,D1
0000140C  B256                     414              CMP.W       (A6),D1
0000140E  6700 04C6                415              BEQ         to_buffer_6
00001412  DDFC 0000000E            416              ADDA.L      #14,A6              *Move to next row
00001418  BDCD                     417              CMPA.L      A5,A6
0000141A  66E4                     418              BNE         loop_6
0000141C  4BF9 000024B6            419  loop_7      LEA         null,A5
00001422  3200                     420              MOVE.W      D0,D1
00001424  0241 F000                421              ANDI.W      #%1111000000000000,D1
00001428  B256                     422              CMP.W       (A6),D1
0000142A  6700 05D8                423              BEQ         to_buffer_7
0000142E  DDFC 0000000E            424              ADDA.L      #14,A6              *Move to next row
00001434  BDCD                     425              CMPA.L      A5,A6
00001436  66E4                     426              BNE         loop_7
00001438  22FC 44415441            427              MOVE.L      #$44415441,(A1)+    *write 'DATA' of ascii-hex into the buffer
0000143E  22FC 20202020            428              MOVE.L      #$20202020,(A1)+    *write '    ' of ascii-hex into the buffer
00001444  3C00                     429              MOVE.W      D0,D6               *D6 holds the original hex-value and will be used in the below MACRO
00001446                           430m             add2ascii
0000146C  6000 05F8                431              BRA         exit_op
00001470                           432  
00001470                           433                    
00001470  548E                     434  to_buffer_1 ADDA.L      #2,A6               *Move 1 column to the right
00001472  22DE                     435              MOVE.L      (A6)+,(A1)+         *Write two long words to the buffer
00001474  22DE                     436              MOVE.L      (A6)+,(A1)+
00001476  6000 05EE                437              BRA         exit_op
0000147A                           438  
0000147A  548E                     439  to_buffer_2 ADDA.L      #2,A6               *Move 1 column to the right
0000147C  22DE                     440              MOVE.L      (A6)+,(A1)+         *Write two long words that contain ascii values to the buffer
0000147E  22DE                     441              MOVE.L      (A6)+,(A1)+
00001480                           442m             xreg2ascii
00001494  6000 05D0                443              BRA         exit_op            
00001498                           444  
00001498  548E                     445  to_buffer_3 ADDA.L      #2,A6               *Move 1 column to the right
0000149A  2448                     446              MOVEA.L     A0,A2               *Save A0 to A2 as a back-up
0000149C  22DE                     447              MOVE.L      (A6)+,(A1)+         *Write two long words that contain ascii values to the buffer
0000149E  22DE                     448              MOVE.L      (A6)+,(A1)+
000014A0  341E                     449              MOVE.W      (A6)+,D2            *D2 holds the syntax pattern number
000014A2  3616                     450              MOVE.W      (A6),D3             *D3 temporarily holds the imme_flag value
000014A4  0C43 0000                451              CMPI.W      #0,D3
000014A8  6700 000A                452              BEQ         skip_imme_1
000014AC  47F9 00002B0A            453              LEA         imme_flag,A3
000014B2  3683                     454              MOVE.W      D3,(A3)
000014B4  0C42 0000                455  skip_imme_1 CMPI.W      #$0000,D2
000014B8  6600 0014                456              BNE         next_3_1
000014BC                           457              * 0000 case - <ea>
000014BC  204A                     458              MOVEA.L     A2,A0               *Restore to the end point of memory instruction
000014BE  5388                     459              SUBA.L      #1,A0               *move back 1 byte the pointer to memory to decode
000014C0  38BC 0000                460              MOVE.W      #$0000,(A4)         *exception - 0000
000014C4  4EB9 00001A70            461              JSR         e_a
000014CA  6000 059A                462              BRA         exit_op
000014CE                           463              
000014CE  0C42 0001                464  next_3_1    CMPI.W      #$0001,D2
000014D2  6600 0044                465              BNE         next_3_2
000014D6                           466              * 0001 case - (.B) #$<hex-value>, <ea>
000014D6  32FC 2324                467              MOVE.W      #$2324,(A1)+        *write '#$' of ascii-hex into the buffer
000014DA  3218                     468              MOVE.W      (A0)+,D1            *read the immediate value from the memory
000014DC                           469m             w_2ascii
00001502                           470              
00001502  32FC 2C20                471              MOVE.W      #$2C20,(A1)+        *write ',' and ' ' (space) of ascii-hex into the buffer            
00001506  204A                     472              MOVEA.L     A2,A0               *Restore to the end point of memory instruction
00001508  5388                     473              SUBA.L      #1,A0               *move back 1 byte the pointer to memory to decode
0000150A  38BC 0002                474              MOVE.W      #$0002,(A4)         *exception - 0002
0000150E  4EB9 00001A70            475              JSR         e_a
00001514  6000 0550                476              BRA         exit_op
00001518                           477  
00001518  0C42 0002                478  next_3_2    CMPI.W      #$0002,D2
0000151C  6600 0044                479              BNE         next_3_3
00001520                           480              * 0002 case - (.W) #$<hex-value>, <ea>
00001520  32FC 2324                481              MOVE.W      #$2324,(A1)+        *write '#$' of ascii-hex into the buffer
00001524  3218                     482              MOVE.W      (A0)+,D1            *read the immediate value from the memory
00001526                           483m             w_2ascii
0000154C  32FC 2C20                484              MOVE.W      #$2C20,(A1)+        *write ',' and ' ' (space) of ascii-hex into the buffer
00001550  204A                     485              MOVEA.L     A2,A0               *Restore to the end point of memory instruction
00001552  5388                     486              SUBA.L      #1,A0               *move back 1 byte the pointer to memory to decode
00001554  38BC 0002                487              MOVE.W      #$0002,(A4)         *exception - 0002
00001558  4EB9 00001A70            488              JSR         e_a
0000155E  6000 0506                489              BRA         exit_op
00001562                           490  
00001562  0C42 0003                491  next_3_3    CMPI.W      #$0003,D2
00001566  6600 0046                492              BNE         next_3_4
0000156A                           493              * 0003 case - (.L) #$<hex-value>, <ea>
0000156A  32FC 2324                494              MOVE.W      #$2324,(A1)+        *write '#$' of ascii-hex into the buffer
0000156E  2218                     495              MOVE.L      (A0)+,D1            *read the immediate value from the memory
00001570                           496m             l_2ascii
00001598  32FC 2C20                497              MOVE.W      #$2C20,(A1)+        *write ',' and ' ' (space) of ascii-hex into the buffer
0000159C  204A                     498              MOVEA.L     A2,A0               *Restore to the end point of memory instruction
0000159E  5388                     499              SUBA.L      #1,A0               *move back 1 byte the pointer to memory to decode
000015A0  38BC 0004                500              MOVE.W      #$0004,(A4)         *exception - 0004
000015A4  4EB9 00001A70            501              JSR         e_a
000015AA  6000 04BA                502              BRA         exit_op
000015AE                           503  
000015AE                           504              
000015AE  0C42 0004                505  next_3_4    CMPI.W      #$0004,D2
000015B2  6600 00CA                506              BNE         next_3_5
000015B6                           507              * 0004 case - <register list>, <ea>
000015B6  4284                     508              CLR.L       D4                  *D4 holds the counter for mask_loop
000015B8  3610                     509              MOVE.W      (A0),D3             *D3 holds the register list mask
000015BA  3200                     510              MOVE.W      D0,D1
000015BC  0241 0038                511              ANDI.W      #%0000000000111000,D1
000015C0  E649                     512              LSR.W       #3,D1
000015C2  B23C 0004                513              CMP.B       #%100,D1            *Is it the predecrement addressing mode?
000015C6  6600 005C                514              BNE         not_pre
000015CA                           515              *reverse mask list case
000015CA  3C3C 8000                516              MOVE.W      #%1000000000000000,D6
000015CE  7E01                     517              MOVE.L      #1,D7               *D7 - bit shift number
000015D0  3203                     518  r_mask_loop MOVE.W      D3,D1
000015D2  C246                     519              AND.W       D6,D1
000015D4  EF79                     520              ROL.W       D7,D1
000015D6  0C41 0000                521              CMPI.W      #0,D1
000015DA  6700 0024                522              BEQ         r_mask_next
000015DE  2A04                     523              MOVE.L      D4,D5
000015E0  0C05 0007                524              CMPI.B      #7,D5
000015E4  6E00 000A                525              BGT         r_write_a         
000015E8  12FC 0044                526              MOVE.B      #$44,(A1)+          *write the ascii-hex value of 'D' into the buffer
000015EC  6000 0008                527              BRA         r_write_num
000015F0  12FC 0041                528  r_write_a   MOVE.B      #$41,(A1)+          *write the ascii-hex value of 'A' into the buffer
000015F4  5105                     529              SUBI.B      #8,D5
000015F6  0605 0030                530  r_write_num ADDI.B      #$30,D5
000015FA  12C5                     531              MOVE.B      D5,(A1)+            *write the ascii-hex value into the buffer
000015FC  32FC 2F20                532              MOVE.W      #$2F20,(A1)+        *write '/' and ' ' (space) of ascii-hex into the buffer            
00001600  E25E                     533  r_mask_next ROR.W       #1,D6
00001602  5204                     534              ADDQ.B      #1,D4
00001604  5207                     535              ADDQ.B      #1,D7
00001606  0C04 0010                536              CMPI.B      #16,D4
0000160A  66C4                     537              BNE         r_mask_loop
0000160C  5589                     538              SUBA.L      #2,A1               *delete the last '/' and ' ' (space) from the buffer
0000160E  32FC 2C20                539              MOVE.W      #$2C20,(A1)+        *write ',' and ' ' (space) of ascii-hex into the buffer
00001612  204A                     540              MOVEA.L     A2,A0               *Restore to the end point of memory instruction
00001614  5388                     541              SUBA.L      #1,A0               *move back 1 byte the pointer to memory to decode
00001616  38BC 0002                542              MOVE.W      #$0002,(A4)         *exception - 0002
0000161A  4EB9 00001A70            543              JSR         e_a
00001620  6000 0444                544              BRA         exit_op
00001624                           545  
00001624  3C3C 0001                546  not_pre     MOVE.W      #%0000000000000001,D6
00001628  4287                     547              CLR.L       D7                  *D7 - bit shift number
0000162A  3203                     548  mask_loop_1 MOVE.W      D3,D1
0000162C  C246                     549              AND.W       D6,D1
0000162E  EE69                     550              LSR.W       D7,D1
00001630  0C41 0000                551              CMPI.W      #0,D1
00001634  6700 0024                552              BEQ         mask_next_1
00001638  2A04                     553              MOVE.L      D4,D5               *D5 - temporary variable that stores the counter value
0000163A  0C05 0007                554              CMPI.B      #7,D5
0000163E  6E00 000A                555              BGT         write_a_1       
00001642  12FC 0044                556              MOVE.B      #$44,(A1)+          *write the ascii-hex value of 'D' into the buffer
00001646  6000 0008                557              BRA         write_num_1
0000164A  12FC 0041                558  write_a_1   MOVE.B      #$41,(A1)+          *write the ascii-hex value of 'A' into the buffer
0000164E  5105                     559              SUBI.B      #8,D5
00001650  0605 0030                560  write_num_1 ADDI.B      #$30,D5
00001654  12C5                     561              MOVE.B      D5,(A1)+            *write the ascii-hex value into the buffer
00001656  32FC 2F20                562              MOVE.W      #$2F20,(A1)+        *write '/' and ' ' (space) of ascii-hex into the buffer            
0000165A  E35E                     563  mask_next_1 ROL.W       #1,D6
0000165C  5204                     564              ADDQ.B      #1,D4
0000165E  5207                     565              ADDQ.B      #1,D7
00001660  0C04 0010                566              CMPI.B      #16,D4
00001664  66C4                     567              BNE         mask_loop_1
00001666  5589                     568              SUBA.L      #2,A1               *delete the last '/' and ' ' (space) from the buffer
00001668  32FC 2C20                569              MOVE.W      #$2C20,(A1)+        *write ',' and ' ' (space) of ascii-hex into the buffer
0000166C  204A                     570              MOVEA.L     A2,A0               *Restore to the end point of memory instruction
0000166E  5388                     571              SUBA.L      #1,A0               *move back 1 byte the pointer to memory to decode
00001670  38BC 0002                572              MOVE.W      #$0002,(A4)         *exception - 0002
00001674  4EB9 00001A70            573              JSR         e_a
0000167A  6000 03EA                574              BRA         exit_op
0000167E                           575  
0000167E                           576  
0000167E                           577              * 0005 case - <ea>, <register list>
0000167E  204A                     578  next_3_5    MOVEA.L     A2,A0               *Restore to the end point of memory instruction
00001680  5388                     579              SUBA.L      #1,A0               *move back 1 byte the pointer to memory to decode
00001682  38BC 0002                580              MOVE.W      #$0002,(A4)         *exception - 0002
00001686  4EB9 00001A70            581              JSR         e_a
0000168C  2648                     582              MOVEA.L     A0,A3               *Save A0 to A3 as a back-up (which is the starting point for next instruction)
0000168E  32FC 2C20                583              MOVE.W      #$2C20,(A1)+        *write ',' and ' ' (space) of ascii-hex into the buffer
00001692                           584              
00001692  204A                     585              MOVEA.L     A2,A0               *Restore to the end point of memory instruction
00001694  4284                     586              CLR.L       D4                  *D4 holds the counter for mask_loop
00001696  3610                     587              MOVE.W      (A0),D3             *D3 holds the register list mask
00001698  3C3C 0001                588              MOVE.W      #%0000000000000001,D6
0000169C  4287                     589              CLR.L       D7                  *D7 - bit shift number
0000169E  3203                     590  mask_loop_2 MOVE.W      D3,D1
000016A0  C246                     591              AND.W       D6,D1
000016A2  EE69                     592              LSR.W       D7,D1
000016A4  0C41 0000                593              CMPI.W      #0,D1
000016A8  6700 0024                594              BEQ         mask_next_2
000016AC  2A04                     595              MOVE.L      D4,D5               *D5 - temporary variable that stores the counter value
000016AE  0C05 0007                596              CMPI.B      #7,D5
000016B2  6E00 000A                597              BGT         write_a_2        
000016B6  12FC 0044                598              MOVE.B      #$44,(A1)+          *write the ascii-hex value of 'D' into the buffer
000016BA  6000 0008                599              BRA         write_num_2
000016BE  12FC 0041                600  write_a_2   MOVE.B      #$41,(A1)+          *write the ascii-hex value of 'A' into the buffer
000016C2  5105                     601              SUBI.B      #8,D5
000016C4  0605 0030                602  write_num_2 ADDI.B      #$30,D5
000016C8  12C5                     603              MOVE.B      D5,(A1)+            *write the ascii-hex value into the buffer
000016CA  32FC 2F20                604              MOVE.W      #$2F20,(A1)+        *write '/' and ' ' (space) of ascii-hex into the buffer            
000016CE  E35E                     605  mask_next_2 ROL.W       #1,D6
000016D0  5204                     606              ADDQ.B      #1,D4
000016D2  5207                     607              ADDQ.B      #1,D7
000016D4  0C04 0010                608              CMPI.B      #16,D4
000016D8  66C4                     609              BNE         mask_loop_2
000016DA  5589                     610              SUBA.L      #2,A1               *delete the last '/' and ' ' (space) from the buffer            
000016DC  204B                     611              MOVEA.L     A3,A0               *Restore to the starting point of the next instruction
000016DE  6000 0386                612              BRA         exit_op
000016E2                           613  
000016E2                           614  
000016E2                           615  
000016E2  548E                     616  to_buffer_4 ADDA.L      #2,A6               *Move 1 column to the right
000016E4  2448                     617              MOVEA.L     A0,A2               *Save A0 to A2 as a back-up
000016E6  22DE                     618              MOVE.L      (A6)+,(A1)+         *Write two long words that contain ascii values to the buffer
000016E8  22DE                     619              MOVE.L      (A6)+,(A1)+
000016EA  341E                     620              MOVE.W      (A6)+,D2            *D2 holds the syntax pattern number
000016EC  3616                     621              MOVE.W      (A6),D3             *D3 temporarily holds the imme_flag value
000016EE  0C43 0000                622              CMPI.W      #0,D3
000016F2  6700 000A                623              BEQ         skip_imme_2
000016F6  47F9 00002B0A            624              LEA         imme_flag,A3
000016FC  3683                     625              MOVE.W      D3,(A3)
000016FE  0C42 0000                626  skip_imme_2 CMPI.W      #$0000,D2
00001702  6600 002C                627              BNE         next_4_1
00001706                           628              * 0000 case - <ea>, Dn
00001706  204A                     629              MOVEA.L     A2,A0               *Restore to the end point of memory instruction
00001708  5388                     630              SUBA.L      #1,A0               *move back 1 byte the pointer to memory to decode
0000170A  38BC 0000                631              MOVE.W      #$0000,(A4)         *exception - 0000
0000170E  4EB9 00001A70            632              JSR         e_a
00001714  32FC 2C20                633              MOVE.W      #$2C20,(A1)+        *write ',' and ' ' (space) of ascii-hex into the buffer
00001718                           634m             xreg2ascii
0000172C  6000 0338                635              BRA         exit_op
00001730                           636              
00001730  0C42 0001                637  next_4_1    CMPI.W      #$0001,D2
00001734  6600 002C                638              BNE         next_4_2
00001738                           639              * 0001 case - Dn, <ea>
00001738                           640m             xreg2ascii
0000174C  32FC 2C20                641              MOVE.W      #$2C20,(A1)+        *write ',' and ' ' (space) of ascii-hex into the buffer
00001750  204A                     642              MOVEA.L     A2,A0               *Restore to the end point of memory instruction
00001752  5388                     643              SUBA.L      #1,A0               *move back 1 byte the pointer to memory to decode
00001754  38BC 0000                644              MOVE.W      #$0000,(A4)         *exception - 0000
00001758  4EB9 00001A70            645              JSR         e_a                 *call e_a subroutine to fill the e.a. into the buffer
0000175E  6000 0306                646              BRA         exit_op
00001762                           647              
00001762                           648              * 0002 case - <ea>, An
00001762  204A                     649  next_4_2    MOVEA.L     A2,A0               *Restore to the end point of memory instruction
00001764  5388                     650              SUBA.L      #1,A0               *move back 1 byte the pointer to memory to decode
00001766  38BC 0000                651              MOVE.W      #$0000,(A4)         *exception - 0000
0000176A  4EB9 00001A70            652              JSR         e_a
00001770  32FC 2C20                653              MOVE.W      #$2C20,(A1)+        *write ',' and ' ' (space) of ascii-hex into the buffer
00001774  12FC 0041                654              MOVE.B      #$41,(A1)+          *write the ascii-hex value of 'A' into the buffer            
00001778                           655m             oreg2ascii
00001788  6000 02DC                656              BRA         exit_op
0000178C                           657  
0000178C                           658  
0000178C  548E                     659  to_buffer_5 ADDA.L      #2,A6               *Move 1 column to the right
0000178E  2448                     660              MOVEA.L     A0,A2               *Save A0 to A2 as a back-up
00001790  22DE                     661              MOVE.L      (A6)+,(A1)+         *Write two long words that contain ascii values to the buffer
00001792  22DE                     662              MOVE.L      (A6)+,(A1)+
00001794  341E                     663              MOVE.W      (A6)+,D2            *D2 holds the syntax pattern number
00001796  3616                     664              MOVE.W      (A6),D3             *D3 temporarily holds the imme_flag value
00001798  0C43 0000                665              CMPI.W      #0,D3
0000179C  6700 000A                666              BEQ         skip_imme_3
000017A0  47F9 00002B0A            667              LEA         imme_flag,A3
000017A6  3683                     668              MOVE.W      D3,(A3)
000017A8  4283                     669  skip_imme_3 CLR.L       D3
000017AA  0C02 00FF                670              CMPI.B      #$FF,D2
000017AE  6600 0062                671              BNE         next_5_1
000017B2                           672              * #$FF case - 32 bit displacement
000017B2  5488                     673              ADDA.L      #2,A0
000017B4  2808                     674              MOVE.L      A0,D4               *D4 holds the address right before the displacement
000017B6  2618                     675              MOVE.L      (A0)+,D3            *D3 holds the displacement
000017B8  D883                     676              ADD.L       D3,D4               *D4 holds the memory address to branch to
000017BA  2C04                     677              MOVE.L      D4,D6               *D6 holds the original hex-value and will be used in the below MACRO
000017BC  E08E                     678              LSR.L       #8,D6
000017BE  E08E                     679              LSR.L       #8,D6
000017C0                           680m             add2ascii
000017E6  3C04                     681              MOVE.W      D4,D6               *D6 holds the original hex-value and will be used in the below MACRO
000017E8                           682m             add2ascii
0000180E  6000 0256                683              BRA         exit_op
00001812                           684  
00001812  0C02 0000                685  next_5_1    CMPI.B      #$00,D2
00001816  6600 0060                686              BNE         next_5_2
0000181A                           687              * #$00 case - 16 bit displacement
0000181A  2808                     688              MOVE.L      A0,D4               *D4 holds the address right before the displacement
0000181C  3618                     689              MOVE.W      (A0)+,D3            *D3 holds the displacement
0000181E  D843                     690              ADD.W       D3,D4               *D4 holds the memory address to branch to
00001820  2C04                     691              MOVE.L      D4,D6               *D6 holds the original hex-value and will be used in the below MACRO
00001822  E08E                     692              LSR.L       #8,D6
00001824  E08E                     693              LSR.L       #8,D6
00001826                           694m             add2ascii
0000184C  3C04                     695              MOVE.W      D4,D6               *D6 holds the original hex-value and will be used in the below MACRO
0000184E                           696m             add2ascii
00001874  6000 01F0                697              BRA         exit_op
00001878                           698                          
00001878                           699              * case - 8 bit displacement
00001878  2808                     700  next_5_2    MOVE.L      A0,D4               *D4 holds the address right before the displacement
0000187A  1602                     701              MOVE.B      D2,D3               *D3 holds the displacement
0000187C  D803                     702              ADD.B       D3,D4               *D4 holds the memory address to branch to
0000187E  2C04                     703              MOVE.L      D4,D6               *D6 holds the original hex-value and will be used in the below MACRO
00001880  E08E                     704              LSR.L       #8,D6
00001882  E08E                     705              LSR.L       #8,D6
00001884                           706m             add2ascii
000018AA  3C04                     707              MOVE.W      D4,D6               *D6 holds the original hex-value and will be used in the below MACRO
000018AC                           708m             add2ascii
000018D2  6000 0192                709              BRA         exit_op
000018D6                           710  
000018D6  548E                     711  to_buffer_6 ADDA.L      #2,A6               *Move 1 column to the right
000018D8  2448                     712              MOVEA.L     A0,A2               *Save A0 to A2 as a back-up
000018DA  22DE                     713              MOVE.L      (A6)+,(A1)+         *Write two long words that contain ascii values to the buffer
000018DC  22DE                     714              MOVE.L      (A6)+,(A1)+
000018DE  341E                     715              MOVE.W      (A6)+,D2            *D2 holds the syntax pattern number
000018E0  3616                     716              MOVE.W      (A6),D3             *D3 temporarily holds the imme_flag value
000018E2  0C43 0000                717              CMPI.W      #0,D3
000018E6  6700 000A                718              BEQ         skip_imme_4
000018EA  47F9 00002B0A            719              LEA         imme_flag,A3
000018F0  3683                     720              MOVE.W      D3,(A3)
000018F2  0C42 0000                721  skip_imme_4 CMPI.W      #$0000,D2
000018F6  6600 0038                722              BNE         next_6_1
000018FA                           723              * 0000 case - (I) # <decimal>, Dy
000018FA  12FC 0023                724              MOVE.B      #$23,(A1)+        *write '#' of ascii-hex into the buffer
000018FE                           725  
000018FE  3200                     726              MOVE.W      D0,D1
00001900  0241 0E00                727              ANDI.W      #%0000111000000000,D1
00001904  E049                     728              LSR.W       #8,D1
00001906  E249                     729              LSR.W       #1,D1
00001908  0601 0030                730              ADDI.B      #$30,D1
0000190C  0C01 0030                731              CMPI.B      #$30,D1
00001910  6600 0004                732              BNE         one2seven
00001914  5001                     733              ADDI.B      #$8,D1
00001916  12C1                     734  one2seven   MOVE.B      D1,(A1)+            *write the ascii-hex value into the buffer
00001918                           735  
00001918  32FC 2C20                736              MOVE.W      #$2C20,(A1)+        *write ',' and ' ' (space) of ascii-hex into the buffer
0000191C                           737m             yreg2ascii
0000192C  6000 0138                738              BRA         exit_op
00001930                           739              
00001930  0C42 0001                740  next_6_1    CMPI.W      #$0001,D2
00001934  6600 002E                741              BNE         next_6_2
00001938                           742              * 0001 case - (R) Dx, Dy
00001938                           743m             xreg2ascii
0000194C  32FC 2C20                744              MOVE.W      #$2C20,(A1)+        *write ',' and ' ' (space) of ascii-hex into the buffer
00001950                           745m             yreg2ascii
00001960  6000 0104                746              BRA         exit_op
00001964                           747  
00001964  0C42 0002                748  next_6_2    CMPI.W      #$0002,D2
00001968  6600 0032                749              BNE         next_6_3
0000196C                           750              * 0002 case - Dx, Dy
0000196C  12FC 0044                751              MOVE.B      #$44,(A1)+          *write the ascii-hex value of 'D' into the buffer
00001970                           752m             oreg2ascii
00001980  32FC 2C20                753              MOVE.W      #$2C20,(A1)+        *write ',' and ' ' (space) of ascii-hex into the buffer
00001984  12FC 0044                754              MOVE.B      #$44,(A1)+          *write the ascii-hex value of 'D' into the buffer
00001988                           755m             oreg2ascii
00001998  6000 00CC                756              BRA         exit_op
0000199C                           757              
0000199C  0C42 0003                758  next_6_3    CMPI.W      #$0003,D2
000019A0  6600 0032                759              BNE         next_6_4
000019A4                           760              * 0003 case - Ax, Ay
000019A4  12FC 0041                761              MOVE.B      #$41,(A1)+          *write the ascii-hex value of 'A' into the buffer
000019A8                           762m             oreg2ascii
000019B8  32FC 2C20                763              MOVE.W      #$2C20,(A1)+        *write ',' and ' ' (space) of ascii-hex into the buffer
000019BC  12FC 0041                764              MOVE.B      #$41,(A1)+          *write the ascii-hex value of 'A' into the buffer
000019C0                           765m             oreg2ascii
000019D0  6000 0094                766              BRA         exit_op
000019D4                           767  
000019D4                           768              * 0004 case - Dx, Ay
000019D4  12FC 0044                769  next_6_4    MOVE.B      #$44,(A1)+          *write the ascii-hex value of 'D' into the buffer
000019D8                           770m             oreg2ascii
000019E8  32FC 2C20                771              MOVE.W      #$2C20,(A1)+        *write ',' and ' ' (space) of ascii-hex into the buffer
000019EC  12FC 0041                772              MOVE.B      #$41,(A1)+          *write the ascii-hex value of 'A' into the buffer
000019F0                           773m             oreg2ascii
00001A00  6000 0064                774              BRA         exit_op
00001A04                           775  
00001A04                           776  
00001A04  548E                     777  to_buffer_7 ADDA.L      #2,A6               *Move 1 column to the right
00001A06  2448                     778              MOVEA.L     A0,A2               *Save A0 to A2 as a back-up
00001A08  22DE                     779              MOVE.L      (A6)+,(A1)+         *Write two long words that contain ascii values to the buffer
00001A0A  22DE                     780              MOVE.L      (A6)+,(A1)+
00001A0C  341E                     781              MOVE.W      (A6)+,D2            *D2 holds the syntax pattern number
00001A0E  3616                     782              MOVE.W      (A6),D3             *D3 temporarily holds the imme_flag value
00001A10  0C43 0000                783              CMPI.W      #0,D3
00001A14  6700 000A                784              BEQ         skip_imme_5
00001A18  47F9 00002B0A            785              LEA         imme_flag,A3
00001A1E  3683                     786              MOVE.W      D3,(A3)
00001A20  0C42 0000                787  skip_imme_5 CMPI.W      #$0000,D2
00001A24  6600 0014                788              BNE         next_7_1
00001A28                           789              * 0000 case - (.B)
00001A28  204A                     790              MOVEA.L     A2,A0               *Restore to the end point of memory instruction
00001A2A  5588                     791              SUBA.L      #2,A0               *move back 2 byte the pointer to memory to decode
00001A2C  38BC 0005                792              MOVE.W      #$0005,(A4)         *exception - 0005
00001A30  4EB9 00001A70            793              JSR         e_a
00001A36  6000 002E                794              BRA         exit_op
00001A3A                           795  
00001A3A  0C42 0001                796  next_7_1    CMPI.W      #$0001,D2
00001A3E  6600 0014                797              BNE         next_7_2
00001A42                           798              * 0001 case - (.W)
00001A42  204A                     799              MOVEA.L     A2,A0               *Restore to the end point of memory instruction
00001A44  5588                     800              SUBA.L      #2,A0               *move back 2 byte the pointer to memory to decode
00001A46  38BC 0006                801              MOVE.W      #$0006,(A4)         *exception - 0006
00001A4A  4EB9 00001A70            802              JSR         e_a
00001A50  6000 0014                803              BRA         exit_op
00001A54                           804              
00001A54                           805              * 0002 case - (.L)
00001A54  204A                     806  next_7_2    MOVEA.L     A2,A0               *Restore to the end point of memory instruction
00001A56  5588                     807              SUBA.L      #2,A0               *move back 2 byte the pointer to memory to decode
00001A58  38BC 0007                808              MOVE.W      #$0007,(A4)         *exception - 0007
00001A5C  4EB9 00001A70            809              JSR         e_a
00001A62  6000 0002                810              BRA         exit_op
00001A66                           811  
00001A66                           812  
00001A66                           813  
00001A66  32FC 0000                814  exit_op     MOVE.W      #$0000,(A1)+        *write '0'(null) of ascii-hex into the buffer
00001A6A  4CDF 7CFF                815              MOVEM.L     (SP)+, A2-A6/D0-D7  *Restore the working registers from stack
00001A6E  4E75                     816              RTS                             *Return to the program
00001A70                           817  
00001A70                           818  
00001A70                           819  
00001A70                           820  ***************************************************************************************************
00001A70                           821  * Subroutine EA
00001A70                           822  
00001A70                           823  
00001A70                           824  
00001A70  48E7 FF3E                825  e_a         MOVEM.L     A2-A6/D0-D7,-(SP)
00001A74  45F9 00002B08            826              LEA         exception,A2
00001A7A  3412                     827              MOVE.W      (A2),D2
00001A7C                           828  
00001A7C  0C42 0004                829              CMPI.W      #4,D2               *is it MOVE instruction or not?
00001A80  6E00 001C                830              BGT         ea_move
00001A84                           831m             parsing_1            
00001A9A  6000 0080                832              BRA         ea2buffer
00001A9E  3018                     833  ea_move     MOVE.W      (A0)+,D0            *done only once and stored in D0
00001AA0                           834m             parsing_2
00001AC0  3A03                     835              MOVE.W      D3,D5
00001AC2  3204                     836              MOVE.W      D4,D1
00001AC4  47F9 00002B0C            837              LEA         move_flag,A3
00001ACA  36BC 0001                838              MOVE.W      #1,(A3)
00001ACE  6000 004C                839              BRA         ea2buffer
00001AD2  32FC 2C20                840  ea_move_d   MOVE.W      #$2C20,(A1)+        *write ',' and ' ' (space) of ascii-hex into the buffer
00001AD6                           841m             parsing_2
00001AF6  3801                     842              MOVE.W      D1,D4
00001AF8  3602                     843              MOVE.W      D2,D3
00001AFA  3A02                     844              MOVE.W      D2,D5
00001AFC  47F9 00002B0C            845              LEA         move_flag,A3
00001B02  36BC 0000                846              MOVE.W      #0,(A3)
00001B06  6000 0014                847              BRA         ea2buffer
00001B0A                           848              
00001B0A  47F9 00002B0C            849  ea_exit     LEA         move_flag,A3
00001B10  0C53 0000                850              CMPI.W      #0,(A3)
00001B14  66BC                     851              BNE         ea_move_d
00001B16  4CDF 7CFF                852              MOVEM.L     (SP)+, A2-A6/D0-D7
00001B1A  4E75                     853              RTS
00001B1C                           854  
00001B1C  0C45 0000                855  ea2buffer   CMPI.W      #%000,D5
00001B20  6600 000E                856              BNE         ea2b_1
00001B24  12FC 0044                857              MOVE.B      #$44,(A1)+          *write the ascii-hex value of 'D' into the buffer
00001B28  0601 0030                858              ADDI.B      #$30,D1
00001B2C  12C1                     859              MOVE.B      D1,(A1)+            *write the ascii-hex value of '0~7' into the buffer
00001B2E  60DA                     860              BRA         ea_exit
00001B30  0C45 0001                861  ea2b_1      CMPI.W      #%001,D5
00001B34  6600 000E                862              BNE         ea2b_2
00001B38  12FC 0041                863              MOVE.B      #$41,(A1)+          *write the ascii-hex value of 'A' into the buffer
00001B3C  0601 0030                864              ADDI.B      #$30,D1
00001B40  12C1                     865              MOVE.B      D1,(A1)+            *write the ascii-hex value of '0~7' into the buffer
00001B42  60C6                     866              BRA         ea_exit
00001B44  0C45 0002                867  ea2b_2      CMPI.W      #%010,D5
00001B48  6600 0012                868              BNE         ea2b_3            
00001B4C  32FC 2841                869              MOVE.W      #$2841,(A1)+        *write the ascii-hex value of '(' and 'A' into the buffer
00001B50  0601 0030                870              ADDI.B      #$30,D1
00001B54  12C1                     871              MOVE.B      D1,(A1)+            *write the ascii-hex value of '0~7' into the buffer            
00001B56  12FC 0029                872              MOVE.B      #$29,(A1)+          *write the ascii-hex value of ')' into the buffer
00001B5A  60AE                     873              BRA         ea_exit
00001B5C  0C45 0003                874  ea2b_3      CMPI.W      #%011,D5
00001B60  6600 0016                875              BNE         ea2b_4            
00001B64  32FC 2841                876              MOVE.W      #$2841,(A1)+        *write the ascii-hex value of '(' and 'A' into the buffer
00001B68  0601 0030                877              ADDI.B      #$30,D1
00001B6C  12C1                     878              MOVE.B      D1,(A1)+            *write the ascii-hex value of '0~7' into the buffer            
00001B6E  12FC 0029                879              MOVE.B      #$29,(A1)+          *write the ascii-hex value of ')' into the buffer
00001B72  32FC 2B20                880              MOVE.W      #$2B20,(A1)+        *write the ascii-hex value of '+' and ' ' into the buffer
00001B76  6092                     881              BRA         ea_exit
00001B78  0C45 0004                882  ea2b_4      CMPI.W      #%100,D5
00001B7C  6600 0018                883              BNE         ea2b_5
00001B80  32FC 202D                884              MOVE.W      #$202D,(A1)+        *write the ascii-hex value of ' ' and '-' into the buffer
00001B84  32FC 2841                885              MOVE.W      #$2841,(A1)+        *write the ascii-hex value of '(' and 'A' into the buffer
00001B88  0601 0030                886              ADDI.B      #$30,D1
00001B8C  12C1                     887              MOVE.B      D1,(A1)+            *write the ascii-hex value of '0~7' into the buffer            
00001B8E  12FC 0029                888              MOVE.B      #$29,(A1)+          *write the ascii-hex value of ')' into the buffer
00001B92  6000 FF76                889              BRA         ea_exit
00001B96  0C45 0005                890  ea2b_5      CMPI.W      #%101,D5
00001B9A  6600 0066                891              BNE         ea2b_6
00001B9E  12FC 0028                892              MOVE.B      #$28,(A1)+        *write the ascii-hex value of '(' into the buffer
00001BA2                           893  
00001BA2  3E18                     894              MOVE.W      (A0)+,D7
00001BA4                           895              
00001BA4  3C07                     896              MOVE.W      D7,D6
00001BA6  0246 8000                897              ANDI.W      #$8000,D6
00001BAA  0C46 0000                898              CMPI.W      #0,D6
00001BAE  6700 000A                899              BEQ         no_signbit1
00001BB2  32FC 2D24                900              MOVE.W      #$2D24,(A1)+          *write the ascii-hex value of '-$' into the buffer
00001BB6  6000 0006                901              BRA         numberbit1
00001BBA  32FC 2B24                902  no_signbit1 MOVE.W      #$2B24,(A1)+          *write the ascii-hex value of '+$' into the buffer
00001BBE  3C07                     903  numberbit1  MOVE.W      D7,D6
00001BC0  0246 7FFF                904              ANDI.W      #$7FFF,D6
00001BC4                           905m             add2ascii
00001BEA  32FC 2C20                906              MOVE.W      #$2C20,(A1)+        *write ',' and ' ' (space) of ascii-hex into the buffer            
00001BEE                           907  
00001BEE  12FC 0041                908              MOVE.B      #$41,(A1)+          *write the ascii-hex value of 'A' into the buffer
00001BF2  1203                     909              MOVE.B      D3,D1               *Restore the back-up to D1
00001BF4  0601 0030                910              ADDI.B      #$30,D1
00001BF8  12C1                     911              MOVE.B      D1,(A1)+            *write the ascii-hex value of '0~7' into the buffer            
00001BFA  12FC 0029                912              MOVE.B      #$29,(A1)+          *write the ascii-hex value of ')' into the buffer
00001BFE  6000 FF0A                913              BRA         ea_exit
00001C02                           914  
00001C02  0C45 0006                915  ea2b_6      CMPI.W      #%110,D5
00001C06  6600 008C                916              BNE         ea2b_7
00001C0A                           917  
00001C0A  12FC 0028                918              MOVE.B      #$28,(A1)+          *write the ascii-hex value of '(' into the buffer
00001C0E                           919  
00001C0E  3E18                     920              MOVE.W      (A0)+,D7
00001C10  3C07                     921              MOVE.W      D7,D6
00001C12  0246 0080                922              ANDI.W      #$0080,D6
00001C16  0C46 0000                923              CMPI.W      #0,D6
00001C1A  6700 000A                924              BEQ         no_signbit2
00001C1E  32FC 2D24                925              MOVE.W      #$2D24,(A1)+          *write the ascii-hex value of '-$' into the buffer
00001C22  6000 0006                926              BRA         numberbit2
00001C26  32FC 2B24                927  no_signbit2 MOVE.W      #$2B24,(A1)+          *write the ascii-hex value of '+$' into the buffer
00001C2A  3C07                     928  numberbit2  MOVE.W      D7,D6
00001C2C  0246 007F                929              ANDI.W      #$007F,D6
00001C30                           930m             add2ascii
00001C56  32FC 2C20                931              MOVE.W      #$2C20,(A1)+        *write ',' and ' ' (space) of ascii-hex into the buffer            
00001C5A                           932  
00001C5A  12FC 0041                933              MOVE.B      #$41,(A1)+          *write the ascii-hex value of 'A' into the buffer
00001C5E  1203                     934              MOVE.B      D3,D1               *Restore the back-up to D1
00001C60  0601 0030                935              ADDI.B      #$30,D1
00001C64  12C1                     936              MOVE.B      D1,(A1)+            *write the ascii-hex value of '0~7' into the buffer
00001C66  32FC 2C20                937              MOVE.W      #$2C20,(A1)+        *write ',' and ' ' (space) of ascii-hex into the buffer
00001C6A                           938              
00001C6A  3C07                     939              MOVE.W      D7,D6
00001C6C  0246 8000                940              ANDI.W      #$8000,D6
00001C70  0C46 0000                941              CMPI.W      #0,D6
00001C74  6700 000A                942              BEQ         d_chosen1
00001C78  12FC 0041                943              MOVE.B      #$41,(A1)+        *write the ascii-hex value of 'A' into the buffer
00001C7C  6000 0006                944              BRA         x_number1
00001C80  12FC 0044                945  d_chosen1   MOVE.B      #$44,(A1)+        *write the ascii-hex value of 'D' into the buffer
00001C84  1203                     946  x_number1   MOVE.B      D3,D1               *Restore the back-up to D1
00001C86  0601 0030                947              ADDI.B      #$30,D1
00001C8A  12C1                     948              MOVE.B      D1,(A1)+            *write the ascii-hex value of '0~7' into the buffer
00001C8C                           949          
00001C8C  12FC 0029                950              MOVE.B      #$29,(A1)+          *write the ascii-hex value of ')' into the buffer
00001C90  6000 FE78                951              BRA         ea_exit
00001C94                           952  
00001C94                           953  
00001C94                           954              * mode = #%111 & reg = #$000
00001C94  0C01 0000                955  ea2b_7      CMPI.B      #%000,D1
00001C98  6600 0032                956              BNE         ea2b_7_1
00001C9C  32FC 2024                957              MOVE.W      #$2024,(A1)+        *write ' ' and '$' of ascii-hex into the buffer
00001CA0  3C18                     958              MOVE.W      (A0)+,D6
00001CA2                           959m             add2ascii
00001CC8  6000 FE40                960              BRA         ea_exit
00001CCC                           961              
00001CCC  0C01 0001                962  ea2b_7_1    CMPI.B      #%001,D1
00001CD0  6600 0060                963              BNE         ea2b_7_2
00001CD4  32FC 2024                964              MOVE.W      #$2024,(A1)+        *write ' ' and '$' of ascii-hex into the buffer
00001CD8  2818                     965              MOVE.L      (A0)+,D4
00001CDA  2C04                     966              MOVE.L      D4,D6
00001CDC  E08E                     967              LSR.L       #8,D6
00001CDE  E08E                     968              LSR.L       #8,D6
00001CE0                           969m             add2ascii
00001D06  3C04                     970              MOVE.W      D4,D6
00001D08                           971m             add2ascii
00001D2E  6000 FDDA                972              BRA         ea_exit
00001D32                           973              
00001D32  0C01 0004                974  ea2b_7_2    CMPI.B      #%100,D1
00001D36  6600 0078                975              BNE         ea2b_7_3
00001D3A                           976  
00001D3A  32FC 2324                977              MOVE.W      #$2324,(A1)+        *write '#$' of ascii-hex into the buffer
00001D3E                           978  
00001D3E                           979              *check if the size for immediate value is Long or Word
00001D3E  47F9 00002B0A            980              LEA         imme_flag,A3
00001D44  3213                     981              MOVE.W      (A3),D1
00001D46  0C41 0000                982              CMPI.W      #0,D1
00001D4A  6700 0034                983              BEQ         not_long
00001D4E  2218                     984              MOVE.L      (A0)+,D1            *read the immediate value from the memory
00001D50                           985m             l_2ascii
00001D78  36BC 0000                986              MOVE.W      #0,(A3)             *reset the imme_flag            
00001D7C  6000 FD8C                987              BRA         ea_exit
00001D80  3218                     988  not_long    MOVE.W      (A0)+,D1            *read the immediate value from the memory
00001D82                           989m             w_2ascii
00001DA8  36BC 0000                990              MOVE.W      #0,(A3)             *reset the imme_flag
00001DAC  6000 FD5C                991              BRA         ea_exit
00001DB0                           992              
00001DB0  0C01 0002                993  ea2b_7_3    CMPI.B      #%010,D1
00001DB4  6600 005E                994              BNE         ea2b_7_4
00001DB8  12FC 0028                995              MOVE.B      #$28,(A1)+        *write the ascii-hex value of '(' into the buffer
00001DBC                           996  
00001DBC  3E18                     997              MOVE.W      (A0)+,D7
00001DBE                           998              
00001DBE  3C07                     999              MOVE.W      D7,D6
00001DC0  0246 8000               1000              ANDI.W      #$8000,D6
00001DC4  0C46 0000               1001              CMPI.W      #0,D6
00001DC8  6700 000A               1002              BEQ         no_signbit3
00001DCC  32FC 2D24               1003              MOVE.W      #$2D24,(A1)+          *write the ascii-hex value of '-$' into the buffer
00001DD0  6000 0006               1004              BRA         numberbit3
00001DD4  32FC 2B24               1005  no_signbit3 MOVE.W      #$2B24,(A1)+          *write the ascii-hex value of '+$' into the buffer
00001DD8  3C07                    1006  numberbit3  MOVE.W      D7,D6
00001DDA  0246 7FFF               1007              ANDI.W      #$7FFF,D6
00001DDE                          1008m             add2ascii
00001E04  32FC 2C20               1009              MOVE.W      #$2C20,(A1)+        *write ',' and ' ' (space) of ascii-hex into the buffer            
00001E08                          1010  
00001E08  32FC 5043               1011              MOVE.W      #$5043,(A1)+        *write the ascii-hex value of 'PC' into the buffer
00001E0C                          1012              
00001E0C  12FC 0029               1013              MOVE.B      #$29,(A1)+          *write the ascii-hex value of ')' into the buffer
00001E10  6000 FCF8               1014              BRA         ea_exit
00001E14                          1015  
00001E14                          1016              * mode = #%111 & reg = #$011
00001E14  12FC 0028               1017  ea2b_7_4    MOVE.B      #$28,(A1)+          *write the ascii-hex value of '(' into the buffer
00001E18                          1018  
00001E18  3E18                    1019              MOVE.W      (A0)+,D7
00001E1A  3C07                    1020              MOVE.W      D7,D6
00001E1C  0246 0080               1021              ANDI.W      #$0080,D6
00001E20  0C46 0000               1022              CMPI.W      #0,D6
00001E24  6700 000A               1023              BEQ         no_signbit4
00001E28  32FC 2D24               1024              MOVE.W      #$2D24,(A1)+          *write the ascii-hex value of '-$' into the buffer
00001E2C  6000 0006               1025              BRA         numberbit4
00001E30  32FC 2B24               1026  no_signbit4 MOVE.W      #$2B24,(A1)+          *write the ascii-hex value of '+$' into the buffer
00001E34  3C07                    1027  numberbit4  MOVE.W      D7,D6
00001E36  0246 007F               1028              ANDI.W      #$007F,D6
00001E3A                          1029m             add2ascii
00001E60  32FC 2C20               1030              MOVE.W      #$2C20,(A1)+        *write ',' and ' ' (space) of ascii-hex into the buffer            
00001E64                          1031  
00001E64  32FC 5043               1032              MOVE.W      #$5043,(A1)+        *write the ascii-hex value of 'PC' into the buffer
00001E68  32FC 2C20               1033              MOVE.W      #$2C20,(A1)+        *write ',' and ' ' (space) of ascii-hex into the buffer
00001E6C                          1034              
00001E6C  3C07                    1035              MOVE.W      D7,D6
00001E6E  0246 8000               1036              ANDI.W      #$8000,D6
00001E72  0C46 0000               1037              CMPI.W      #0,D6
00001E76  6700 000A               1038              BEQ         d_chosen2
00001E7A  12FC 0041               1039              MOVE.B      #$41,(A1)+        *write the ascii-hex value of 'A' into the buffer
00001E7E  6000 0006               1040              BRA         x_number2
00001E82  12FC 0044               1041  d_chosen2   MOVE.B      #$44,(A1)+        *write the ascii-hex value of 'D' into the buffer
00001E86  1203                    1042  x_number2   MOVE.B      D3,D1               *Restore the back-up to D1
00001E88  0601 0030               1043              ADDI.B      #$30,D1
00001E8C  12C1                    1044              MOVE.B      D1,(A1)+            *write the ascii-hex value of '0~7' into the buffer
00001E8E                          1045          
00001E8E  12FC 0029               1046              MOVE.B      #$29,(A1)+          *write the ascii-hex value of ')' into the buffer
00001E92  6000 FC76               1047              BRA         ea_exit
00001E96                          1048  
00001E96                          1049  
00001E96                          1050  
00001E96                          1051  ***************************************************************************************************
00001E96                          1052  
00001E96                          1053  
00001E96                          1054  
00001E96                          1055  
00001E96                          1056  
00001E96                          1057  
00001E96                          1058  
00001E96= 4E71 4E4F 5020 2...     1059  case_1  DC.W        $4E71,'NOP     ',$0000,$0000
00001EA4= 4E75 5254 5320 2...     1060          DC.W        $4E75,'RTS     ',$0000,$0000
00001EB2= 4840 5357 4150 2...     1061  case_2  DC.W        $4840,'SWAP    ',$0000,$0000
00001EC0= 0600 4144 4449 2...     1062  case_3  DC.W        $0600,'ADDI.B  ',$0001,$0000
00001ECE= 0640 4144 4449 2...     1063          DC.W        $0640,'ADDI.W  ',$0002,$0000
00001EDC= 0680 4144 4449 2...     1064          DC.W        $0680,'ADDI.L  ',$0003,$0000
00001EEA= 0200 414E 4449 2...     1065          DC.W        $0200,'ANDI.B  ',$0001,$0000
00001EF8= 0240 414E 4449 2...     1066          DC.W        $0240,'ANDI.W  ',$0002,$0000
00001F06= 0280 414E 4449 2...     1067          DC.W        $0280,'ANDI.L  ',$0003,$0000
00001F14= E0C0 4153 5220 2...     1068          DC.W        $E0C0,'ASR     ',$0000,$0000
00001F22= E1C0 4153 4C20 2...     1069          DC.W        $E1C0,'ASL     ',$0000,$0000
00001F30= 4200 434C 522E 4...     1070          DC.W        $4200,'CLR.B   ',$0000,$0000
00001F3E= 4240 434C 522E 5...     1071          DC.W        $4240,'CLR.W   ',$0000,$0000
00001F4C= 4280 434C 522E 4...     1072          DC.W        $4280,'CLR.L   ',$0000,$0000
00001F5A= 0C00 434D 5049 2...     1073          DC.W        $0C00,'CMPI.B  ',$0001,$0000
00001F68= 0C40 434D 5049 2...     1074          DC.W        $0C40,'CMPI.W  ',$0002,$0000
00001F76= 0C80 434D 5049 2...     1075          DC.W        $0C80,'CMPI.L  ',$0003,$0000
00001F84= 0A00 454F 5249 2...     1076          DC.W        $0A00,'EORI.B  ',$0001,$0000
00001F92= 0A40 454F 5249 2...     1077          DC.W        $0A40,'EORI.W  ',$0002,$0000
00001FA0= 0A80 454F 5249 2...     1078          DC.W        $0A80,'EORI.L  ',$0003,$0000
00001FAE= 4EC0 4A4D 5020 2...     1079          DC.W        $4EC0,'JMP     ',$0000,$0000
00001FBC= 4E80 4A53 5220 2...     1080          DC.W        $4E80,'JSR     ',$0000,$0000
00001FCA= E2C0 4C53 5220 2...     1081          DC.W        $E2C0,'LSR     ',$0000,$0000
00001FD8= E3C0 4C53 4C20 2...     1082          DC.W        $E3C0,'LSL     ',$0000,$0000
00001FE6= 4400 4E45 472E 4...     1083          DC.W        $4400,'NEG.B   ',$0000,$0000
00001FF4= 4440 4E45 472E 5...     1084          DC.W        $4440,'NEG.W   ',$0000,$0000
00002002= 4480 4E45 472E 4...     1085          DC.W        $4480,'NEG.L   ',$0000,$0000
00002010= 4600 4E4F 542E 4...     1086          DC.W        $4600,'NOT.B   ',$0000,$0000
0000201E= 4640 4E4F 542E 5...     1087          DC.W        $4640,'NOT.W   ',$0000,$0000
0000202C= 4680 4E4F 542E 4...     1088          DC.W        $4680,'NOT.L   ',$0000,$0000
0000203A= 0000 4F52 492E 4...     1089          DC.W        $0000,'ORI.B   ',$0001,$0000
00002048= 0040 4F52 492E 5...     1090          DC.W        $0040,'ORI.W   ',$0002,$0000
00002056= 0080 4F52 492E 4...     1091          DC.W        $0080,'ORI.L   ',$0003,$0000
00002064= E6C0 524F 5220 2...     1092          DC.W        $E6C0,'ROR     ',$0000,$0000
00002072= E7C0 524F 4C20 2...     1093          DC.W        $E7C0,'ROL     ',$0000,$0000
00002080= 0400 5355 4249 2...     1094          DC.W        $0400,'SUBI.B  ',$0001,$0000
0000208E= 0440 5355 4249 2...     1095          DC.W        $0440,'SUBI.W  ',$0002,$0000
0000209C= 0480 5355 4249 2...     1096          DC.W        $0480,'SUBI.L  ',$0003,$0000
000020AA= 4880 4D4F 5645 4...     1097          DC.W        $4880,'MOVEM.W ',$0004,$0000
000020B8= 4C80 4D4F 5645 4...     1098          DC.W        $4C80,'MOVEM.W ',$0005,$0000
000020C6= 48C0 4D4F 5645 4...     1099          DC.W        $48C0,'MOVEM.L ',$0004,$0000
000020D4= 4CC0 4D4F 5645 4...     1100          DC.W        $4CC0,'MOVEM.L ',$0005,$0000
000020E2= D000 4144 442E 4...     1101  case_4  DC.W        $D000,'ADD.B   ',$0000,$0000
000020F0= D100 4144 442E 4...     1102          DC.W        $D100,'ADD.B   ',$0001,$0000
000020FE= D040 4144 442E 5...     1103          DC.W        $D040,'ADD.W   ',$0000,$0000
0000210C= D140 4144 442E 5...     1104          DC.W        $D140,'ADD.W   ',$0001,$0000
0000211A= D080 4144 442E 4...     1105          DC.W        $D080,'ADD.L   ',$0000,$0001
00002128= D180 4144 442E 4...     1106          DC.W        $D180,'ADD.L   ',$0001,$0000
00002136= D0C0 4144 4441 2...     1107          DC.W        $D0C0,'ADDA.W  ',$0002,$0000
00002144= D1C0 4144 4441 2...     1108          DC.W        $D1C0,'ADDA.L  ',$0002,$0001
00002152= C000 414E 442E 4...     1109          DC.W        $C000,'AND.B   ',$0000,$0000
00002160= C100 414E 442E 4...     1110          DC.W        $C100,'AND.B   ',$0001,$0000
0000216E= C040 414E 442E 5...     1111          DC.W        $C040,'AND.W   ',$0000,$0000
0000217C= C140 414E 442E 5...     1112          DC.W        $C140,'AND.W   ',$0001,$0000
0000218A= C080 414E 442E 4...     1113          DC.W        $C080,'AND.L   ',$0000,$0001
00002198= C180 414E 442E 4...     1114          DC.W        $C180,'AND.L   ',$0001,$0000
000021A6= B000 434D 502E 4...     1115          DC.W        $B000,'CMP.B   ',$0000,$0000
000021B4= B040 434D 502E 5...     1116          DC.W        $B040,'CMP.W   ',$0000,$0000
000021C2= B080 434D 502E 4...     1117          DC.W        $B080,'CMP.L   ',$0000,$0001
000021D0= B0C0 434D 5041 2...     1118          DC.W        $B0C0,'CMPA.W  ',$0002,$0000
000021DE= B1C0 434D 5041 2...     1119          DC.W        $B1C0,'CMPA.L  ',$0002,$0001
000021EC= B100 454F 522E 4...     1120          DC.W        $B100,'EOR.B   ',$0001,$0000
000021FA= B140 454F 522E 5...     1121          DC.W        $B140,'EOR.W   ',$0001,$0000
00002208= B180 454F 522E 4...     1122          DC.W        $B180,'EOR.L   ',$0001,$0000
00002216= 41C0 4C45 4120 2...     1123          DC.W        $41C0,'LEA     ',$0002,$0000
00002224= 3040 4D4F 5645 4...     1124          DC.W        $3040,'MOVEA.W ',$0002,$0000
00002232= 2040 4D4F 5645 4...     1125          DC.W        $2040,'MOVEA.L ',$0002,$0001
00002240= 8000 4F52 2E42 2...     1126          DC.W        $8000,'OR.B    ',$0000,$0000
0000224E= 8100 4F52 2E42 2...     1127          DC.W        $8100,'OR.B    ',$0001,$0000
0000225C= 8040 4F52 2E57 2...     1128          DC.W        $8040,'OR.W    ',$0000,$0000
0000226A= 8140 4F52 2E57 2...     1129          DC.W        $8140,'OR.W    ',$0001,$0000
00002278= 8080 4F52 2E4C 2...     1130          DC.W        $8080,'OR.L    ',$0000,$0001
00002286= 8180 4F52 2E4C 2...     1131          DC.W        $8180,'OR.L    ',$0001,$0000
00002294= 9000 5355 422E 4...     1132          DC.W        $9000,'SUB.B   ',$0000,$0000
000022A2= 9100 5355 422E 4...     1133          DC.W        $9100,'SUB.B   ',$0001,$0000
000022B0= 9040 5355 422E 5...     1134          DC.W        $9040,'SUB.W   ',$0000,$0000
000022BE= 9140 5355 422E 5...     1135          DC.W        $9140,'SUB.W   ',$0001,$0000
000022CC= 9080 5355 422E 4...     1136          DC.W        $9080,'SUB.L   ',$0000,$0001
000022DA= 9180 5355 422E 4...     1137          DC.W        $9180,'SUB.L   ',$0001,$0000
000022E8= 90C0 5355 4241 2...     1138          DC.W        $90C0,'SUBA.W  ',$0002,$0000
000022F6= 91C0 5355 4241 2...     1139          DC.W        $91C0,'SUBA.L  ',$0002,$0001
00002304= 6100 4253 5220 2...     1140  case_5  DC.W        $6100,'BSR     ',$0000,$0000
00002312= C140 4558 4720 2...     1141  case_6  DC.W        $C140,'EXG     ',$0002,$0000
00002320= C148 4558 4720 2...     1142          DC.W        $C148,'EXG     ',$0003,$0000
0000232E= C188 4558 4720 2...     1143          DC.W        $C188,'EXG     ',$0004,$0000
0000233C= E008 4C53 522E 4...     1144          DC.W        $E008,'LSR.B   ',$0000,$0000
0000234A= E028 4C53 522E 4...     1145          DC.W        $E028,'LSR.B   ',$0001,$0000
00002358= E048 4C53 522E 5...     1146          DC.W        $E048,'LSR.W   ',$0000,$0000
00002366= E068 4C53 522E 5...     1147          DC.W        $E068,'LSR.W   ',$0001,$0000
00002374= E088 4C53 522E 4...     1148          DC.W        $E088,'LSR.L   ',$0000,$0000
00002382= E0A8 4C53 522E 4...     1149          DC.W        $E0A8,'LSR.L   ',$0001,$0000
00002390= E108 4C53 4C2E 4...     1150          DC.W        $E108,'LSL.B   ',$0000,$0000
0000239E= E128 4C53 4C2E 4...     1151          DC.W        $E128,'LSL.B   ',$0001,$0000
000023AC= E148 4C53 4C2E 5...     1152          DC.W        $E148,'LSL.W   ',$0000,$0000
000023BA= E168 4C53 4C2E 5...     1153          DC.W        $E168,'LSL.W   ',$0001,$0000
000023C8= E188 4C53 4C2E 4...     1154          DC.W        $E188,'LSL.L   ',$0000,$0000
000023D6= E1A8 4C53 4C2E 4...     1155          DC.W        $E1A8,'LSL.L   ',$0001,$0000
000023E4= E018 524F 522E 4...     1156          DC.W        $E018,'ROR.B   ',$0000,$0000
000023F2= E038 524F 522E 4...     1157          DC.W        $E038,'ROR.B   ',$0001,$0000
00002400= E058 524F 522E 5...     1158          DC.W        $E058,'ROR.W   ',$0000,$0000
0000240E= E078 524F 522E 5...     1159          DC.W        $E078,'ROR.W   ',$0001,$0000
0000241C= E098 524F 522E 4...     1160          DC.W        $E098,'ROR.L   ',$0000,$0000
0000242A= E0B8 524F 522E 4...     1161          DC.W        $E0B8,'ROR.L   ',$0001,$0000
00002438= E118 524F 4C2E 4...     1162          DC.W        $E118,'ROL.B   ',$0000,$0000
00002446= E138 524F 4C2E 4...     1163          DC.W        $E138,'ROL.B   ',$0001,$0000
00002454= E158 524F 4C2E 5...     1164          DC.W        $E158,'ROL.W   ',$0000,$0000
00002462= E178 524F 4C2E 5...     1165          DC.W        $E178,'ROL.W   ',$0001,$0000
00002470= E198 524F 4C2E 4...     1166          DC.W        $E198,'ROL.L   ',$0000,$0000
0000247E= E1B8 524F 4C2E 4...     1167          DC.W        $E1B8,'ROL.L   ',$0001,$0000
0000248C= 1000 4D4F 5645 2...     1168  case_7  DC.W        $1000,'MOVE.B  ',$0000,$0000
0000249A= 3000 4D4F 5645 2...     1169          DC.W        $3000,'MOVE.W  ',$0001,$0000
000024A8= 2000 4D4F 5645 2...     1170          DC.W        $2000,'MOVE.L  ',$0002,$0001
000024B6                          1171  
000024B6= 00                      1172  null     DC.B    0                                 *Null terminator
000024B7                          1173  
000024B7                          1174  
000024B7                          1175  
000024B7                          1176  
000024B8= 456E 7465 7220 7...     1177  string1     DC.W    'Enter the starting address in Hex: ',0
000024DE= 456E 7465 7220 7...     1178  string2     DC.W    'Enter the ending address in Hex: ',0
00002502= 4C65 6E67 7468 2...     1179  string3     DC.W    'Length is too long. Maximum allowed number of characters are 8',0
00002542= 496E 7661 6C69 6...     1180  string4     DC.W    'Invalid character detected. Only hexadecimal characters are allowed.',0
00002588= 4D65 6D6F 7279 2...     1181  string5     DC.W    'Memory is out of range. The correct memory range is 0 - FFFFFF (16MB) ',0
000025D0= 4164 6472 6573 7...     1182  string6     DC.W    'Address has been modified to enforce the even address boundary.',0
00002612= 496C 6C65 6761 6...     1183  string7     DC.W    'Illegal address. End address should be greater or equal to the start address.',0
00002662= 5468 6520 6D65 6...     1184  string8     DC.W    'The memory range has been disassembled successfuly.',0
00002698= 5072 6573 7320 6...     1185  string9     DC.W    'Press any key to continue. (Press <q> to quit): ',0
000026CA= 0000                    1186  newline     DC.W    '',0
000026CC                          1187  
000026CC                          1188  reader      DS.L    100
0000285C                          1189  reader2     DS.L    100
000029EC                          1190  
000029EC                          1191  start_addr  DS.L    10
00002A14                          1192  end_addr    DS.L    10
00002A3C                          1193  which_add   DS.L    1
00002A40                          1194  
00002A40                          1195  
00002A40                          1196  buffer      DS.W        100                  *Print buffer
00002B08                          1197  
00002B08= 0000                    1198  exception   DC.W        0
00002B0A= 0000                    1199  imme_flag   DC.W        0
00002B0C= 0000                    1200  move_flag   DC.W        0
00002B0E                          1201  
00002B0E                          1202  
00002B0E                          1203  
00002B0E                          1204  
00002B0E                          1205  
00002B0E                          1206              
00002B0E                          1207  ***************** TEST PROGRAM - START ***********************************
00002B0E                          1208  
00020000                          1209          ORG     $20000
00020000  36FC FFFF               1210              MOVE.W      #$FFFF,(A3)+        *Create the test pattern of $FFFF
00020004  36FC AAAA               1211              MOVE.W      #$AAAA,(A3)+        *Create the test pattern of $AAAA
00020008  303C FFFF               1212              MOVE.W      #$FFFF,D0           *Load the value to D0
0002000C  0A40 FFFF               1213              EORI.W      #$FFFF,D0           *Complement the 16 bits in D0
00020010  36C0                    1214              MOVE.W      D0,(A3)+            *Create the test pattern of complement of $FFFF
00020012  303C AAAA               1215              MOVE.W      #$AAAA,D0           *Load the value to D0
00020016  0A40 FFFF               1216              EORI.W      #$FFFF,D0           *Complement the 16 bits in D0
0002001A  36C0                    1217              MOVE.W      D0,(A3)+            *Create the test pattern of complement of $AAAA
0002001C                          1218            
0002001C  303C 0001               1219              MOVE.W      #$0001,D0           *Load the value to D0
00020020                          1220  
00020020                          1221  
00020020  5207                    1222          ADDI.B      #1,D7
00020022  49F8 29EC               1223          LEA         start_addr,A4       *A4 will walk through the memory
00020026  48D6 1001               1224          MOVEM.L     A4/D0, (A6)        *Save the working registers on stack
0002002A  4286                    1225          CLR.L       D6            *Set the memory variable bad_addr to 0
0002002C  4245                    1226          CLR.W       D5            *Set the memory variable intended to 0
0002002E                          1227  
0002002E= 00                      1228  terminator        DC.B        0                   *Null terminator
0002002F                          1229  
0002002F                          1230  ***************** TEST PROGRAM - END **************************************
0002002F                          1231  
0002002F                          1232  
0002002F                          1233  
0002002F                          1234           END         pgm_start           *End of program and load address

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
AD2ASCII_13         17C6
AD2ASCII_14         17EE
AD2ASCII_15         182C
AD2ASCII_16         1854
AD2ASCII_17         188A
AD2ASCII_18         18B2
AD2ASCII_3          1344
AD2ASCII_31         1BCA
AD2ASCII_32         1C36
AD2ASCII_33         1CA8
AD2ASCII_34         1CE6
AD2ASCII_35         1D0E
AD2ASCII_38         1DE4
AD2ASCII_39         1E40
AD2ASCII_4          136C
AD2ASCII_5          144C
ADD2ASCII           A6B
ADNUMBERS_13        17D6
ADNUMBERS_14        17FE
ADNUMBERS_15        183C
ADNUMBERS_16        1864
ADNUMBERS_17        189A
ADNUMBERS_18        18C2
ADNUMBERS_3         1354
ADNUMBERS_31        1BDA
ADNUMBERS_32        1C46
ADNUMBERS_33        1CB8
ADNUMBERS_34        1CF6
ADNUMBERS_35        1D1E
ADNUMBERS_38        1DF4
ADNUMBERS_39        1E50
ADNUMBERS_4         137C
ADNUMBERS_5         145C
ASCII_L_36          1D58
ASCII_L_9           1578
ASCII_W_37          1D88
ASCII_W_7           14E2
ASCII_W_8           152C
ASK_NEXT            10DC
ASK_START           10C4
BEGINNING           100C
BOUND_NEXT          123C
BUFFER              2A40
CASE_1              1E96
CASE_2              1EB2
CASE_3              1EC0
CASE_4              20E2
CASE_5              2304
CASE_6              2312
CASE_7              248C
D_CHOSEN1           1C80
D_CHOSEN2           1E82
EA2BUFFER           1B1C
EA2B_1              1B30
EA2B_2              1B44
EA2B_3              1B5C
EA2B_4              1B78
EA2B_5              1B96
EA2B_6              1C02
EA2B_7              1C94
EA2B_7_1            1CCC
EA2B_7_2            1D32
EA2B_7_3            1DB0
EA2B_7_4            1E14
EA_EXIT             1B0A
EA_MOVE             1A9E
EA_MOVE_D           1AD2
END_ADDR            2A14
END_CHOSEN1         10D6
END_CHOSEN2         1112
END_CHOSEN3         1236
EVEN_NUM_1          118C
EVEN_NUM_2          1212
EXCEPTION           2B08
EXIT_IO             1292
EXIT_OP             1A66
E_A                 1A70
HEX_NEXT_1          1194
HEX_NEXT_2          121A
ILLEGAL             130A
IMME_FLAG           2B0A
INVALID             12EA
IO_CODE             10BA
LEGAL_CHECK         1274
LOOP_1              1394
LOOP_2              13A4
LOOP_3              13B6
LOOP_4              13D2
LOOP_5              13EE
LOOP_6              1400
LOOP_7              141C
LOWERCASE_1         115C
LOWERCASE_2         11E2
L_2ASCII            F49
MASK_LOOP_1         162A
MASK_LOOP_2         169E
MASK_NEXT_1         165A
MASK_NEXT_2         16CE
MOVE_FLAG           2B0C
NEWLINE             26CA
NEXT_3_1            14CE
NEXT_3_2            1518
NEXT_3_3            1562
NEXT_3_4            15AE
NEXT_3_5            167E
NEXT_4_1            1730
NEXT_4_2            1762
NEXT_5_1            1812
NEXT_5_2            1878
NEXT_6_1            1930
NEXT_6_2            1964
NEXT_6_3            199C
NEXT_6_4            19D4
NEXT_7_1            1A3A
NEXT_7_2            1A54
NOT_LONG            1D80
NOT_PRE             1624
NO_SIGNBIT1         1BBA
NO_SIGNBIT2         1C26
NO_SIGNBIT3         1DD4
NO_SIGNBIT4         1E30
NULL                24B6
NUMBERBIT1          1BBE
NUMBERBIT2          1C2A
NUMBERBIT3          1DD8
NUMBERBIT4          1E34
NUMBERS_L_36        1D68
NUMBERS_L_9         1588
NUMBERS_W_37        1D98
NUMBERS_W_7         14F2
NUMBERS_W_8         153C
ONE2SEVEN           1916
OP_CODE             131A
OP_LOOP             1046
OREG2ASCII          954
OUT_OF_RANG         12FA
PARSING_1           11AC
PARSING_2           1396
PASSED_1            1168
PASSED_2            11EE
PGM_START           1000
RANGE_CHECK         1262
READER              26CC
READER2             285C
R_COPY              12BE
R_MASK_LOOP         15D0
R_MASK_NEXT         1600
R_WRITE_A           15F0
R_WRITE_NUM         15F6
SKIP_IMME_1         14B4
SKIP_IMME_2         16FE
SKIP_IMME_3         17A8
SKIP_IMME_4         18F2
SKIP_IMME_5         1A20
STACK               A0000
START_ADDR          29EC
STRING1             24B8
STRING2             24DE
STRING3             2502
STRING4             2542
STRING5             2588
STRING6             25D0
STRING7             2612
STRING8             2662
STRING9             2698
TERMINATOR          2002E
THE_END             10B0
TOO_LONG            12DA
TOO_SHORT           1298
TO_BUFFER_1         1470
TO_BUFFER_2         147A
TO_BUFFER_3         1498
TO_BUFFER_4         16E2
TO_BUFFER_5         178C
TO_BUFFER_6         18D6
TO_BUFFER_7         1A04
TO_HEX_1            1172
TO_HEX_2            11F8
VAL_CHECK           0
VAL_LOOP_1          1126
VAL_LOOP_2          11AC
VAL_NEXT            1118
VAL_START           10FA
WHICH_ADD           2A3C
WRITE_A_1           164A
WRITE_A_2           16BE
WRITE_NUM_1         1650
WRITE_NUM_2         16C4
W_2ASCII            CE6
XREG2ASCII          6A6
X_NUMBER1           1C84
X_NUMBER2           1E86
YREG2ASCII          81C
Z_ADDER             12B2
