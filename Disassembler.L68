00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 12/14/2016 8:01:03 PM

00000000                             1  *----------------------------------------------------------------------------------------------------
00000000                             2  * Title      : Disassembler
00000000                             3  * Written by : Team Bazinga
00000000                             4  * Date       : 12/14/2016
00000000                             5  * Description: This program is an inverse assembler (disassembler) that will convert a memory image
00000000                             6  *              of instructions and data back to 68000 assembly language and output the disassembled
00000000                             7  *              code to the display.
00000000                             8  *
00000000                             9  *              The list of instructions that this program can disassemble is as below.
00000000                            10  *              ADD, ADDA, ADDI, AND, ANDI, ASL, ASR, BSR, CLR, CMP, CMPA, CMPI, EOR, EORI, EXG, 
00000000                            11  *              JMP, JSR, LEA, LSR, LSL, MOVE, MOVEA, MOVEM, NEG, NOP, NOT, OR, ROL, ROR, RTS,
00000000                            12  *              SUB, SUBA, SUBI, SWAP
00000000                            13  *----------------------------------------------------------------------------------------------------
00000000                            14  
00000000                            15  
00000000                            16  
00000000                            17  *----------------------------------------------------------------------------------------------------
00000000                            18  * Macros
00000000                            19  *----------------------------------------------------------------------------------------------------
00000000                            20  
00000000                            21  *D6 and A6 is set, prior to calling this Macro
00000000                            22  val_check   MACRO
00000000                            23              MOVE.L      #$FF000000,D5
00000000                            24              MOVE.L      #24,D7
00000000                            25              CLR.L       D4
00000000                            26  val_loop\@  MOVE.L      D6,D1               *D6 holds the original hex-value
00000000                            27              AND.L       D5,D1
00000000                            28              LSR.L       D7,D1               *shift bits to the right
00000000                            29  
00000000                            30              CMPI.B      #$30,D1             * D1 < $30 (0 in hex)
00000000                            31              BLT         invalid
00000000                            32              CMPI.B      #$66,D1             * D1 > $66 (f in hex)
00000000                            33              BGT         invalid
00000000                            34              CMPI.B      #$61,D1             * D1 >= $61 (a in hex)
00000000                            35              BGE         lowercase\@
00000000                            36              CMPI.B      #$46,D1             * D1 > $46 (F in hex)
00000000                            37              BGT         invalid
00000000                            38              CMPI.B      #$39,D1             * D1 <= $39 (9 in hex)
00000000                            39              BLE         passed\@
00000000                            40              CMPI.B      #$41,D1             * D1 < $41  (A in hex)
00000000                            41              BLT         invalid
00000000                            42  lowercase\@ CMPI.B      #$46,D1
00000000                            43              BLE         passed\@
00000000                            44              SUBI.B      #$20,D1
00000000                            45  passed\@    CMPI.B      #$39,D1
00000000                            46              BLE         to_hex\@
00000000                            47              SUBI.B      #$7,D1
00000000                            48  to_hex\@    SUBI.B      #$30,D1
00000000                            49              ADDQ.B      #1,D4
00000000                            50              ANDI.L      #$00000001,D4
00000000                            51              CMPI.B      #0,D4               *Is D4 even or odd?
00000000                            52              BEQ         even_num\@
00000000                            53              MOVE.B      D1,D2
00000000                            54              BRA         hex_next\@
00000000                            55  even_num\@  LSL.B       #4,D2
00000000                            56              MOVE.B      D1,D3
00000000                            57              OR.B        D2,D3
00000000                            58              MOVE.B      D3,(A6)+            *A6 is the pointer to which data will be written
00000000                            59  hex_next\@  LSR.L       #8,D5
00000000                            60              SUBQ.B      #8,D7
00000000                            61              CMPI.B      #0,D7
00000000                            62              BGE         val_loop\@
00000000                            63              ENDM
00000000                            64  
00000000                            65  
00000000                            66  *convert reg_digits to ascii-hex and write to the buffer
00000000                            67  dxreg2ascii MACRO
00000000                            68              MOVE.B      #$44,(A1)+          *write the ascii-hex value of 'D' into the buffer
00000000                            69              MOVE.W      D0,D1
00000000                            70              ANDI.W      #%0000111000000000,D1
00000000                            71              LSR.W       #8,D1
00000000                            72              LSR.W       #1,D1
00000000                            73              ADDI.B      #$30,D1
00000000                            74              MOVE.B      D1,(A1)+            *write the ascii-hex value into the buffer
00000000                            75              ENDM
00000000                            76  
00000000                            77  dyreg2ascii MACRO
00000000                            78              MOVE.B      #$44,(A1)+          *write the ascii-hex value of 'D' into the buffer
00000000                            79              MOVE.W      D0,D1
00000000                            80              ANDI.W      #%0000000000000111,D1
00000000                            81              ADDI.B      #$30,D1
00000000                            82              MOVE.B      D1,(A1)+            *write the ascii-hex value into the buffer
00000000                            83              ENDM
00000000                            84              
00000000                            85  oxreg2ascii MACRO
00000000                            86              MOVE.W      D0,D1
00000000                            87              ANDI.W      #%0000111000000000,D1
00000000                            88              LSR.W       #8,D1
00000000                            89              LSR.W       #1,D1
00000000                            90              ADDI.B      #$30,D1
00000000                            91              MOVE.B      D1,(A1)+            *write the ascii-hex value into the buffer
00000000                            92              ENDM
00000000                            93              
00000000                            94  oyreg2ascii MACRO
00000000                            95              MOVE.W      D0,D1
00000000                            96              ANDI.W      #%0000000000000111,D1
00000000                            97              ADDI.B      #$30,D1
00000000                            98              MOVE.B      D1,(A1)+            *write the ascii-hex value into the buffer
00000000                            99              ENDM
00000000                           100  
00000000                           101  add2ascii   MACRO
00000000                           102              MOVE.W      #$F000,D5
00000000                           103              MOVE.L      #12,D7
00000000                           104  ad2ascii\@  MOVE.W      D6,D1               *D6 holds the original hex-value
00000000                           105              AND.W       D5,D1
00000000                           106              LSR.W       D7,D1               *shift 12 bits to the right
00000000                           107              CMPI.W      #9,D1
00000000                           108              BLE         adnumbers\@
00000000                           109              ADDI.W      #$7,D1
00000000                           110  adnumbers\@ ADDI.W      #$30,D1
00000000                           111              MOVE.B      D1,(A1)+            *write the ascii-hex equivalent of hex-character to buffer
00000000                           112              LSR.W       #4,D5
00000000                           113              SUBQ.B      #4,D7
00000000                           114              CMPI.B      #0,D7
00000000                           115              BGE         ad2ascii\@
00000000                           116              ENDM
00000000                           117  
00000000                           118  *convert D1.W (hex-value) to the ascii-hex in D6 and write it into the buffer
00000000                           119  w_2ascii    MACRO
00000000                           120              MOVE.W      #$F000,D4           *D4 - ANDING pattern
00000000                           121              MOVE.L      #12,D7
00000000                           122  ascii_w\@   MOVE.W      D1,D6
00000000                           123              AND.W       D4,D6
00000000                           124              LSR.W       D7,D6               *shift bits to the right
00000000                           125              CMPI.W      #9,D6
00000000                           126              BLE         numbers_w\@
00000000                           127              ADDI.B      #$7,D6
00000000                           128  numbers_w\@ ADDI.B      #$30,D6
00000000                           129              MOVE.B      D6,(A1)+          *write the ascii-hex equivalent of hex-value to the buffer
00000000                           130              LSR.W       #4,D4
00000000                           131              SUBQ.B      #4,D7
00000000                           132              CMPI.B      #0,D7
00000000                           133              BGE         ascii_w\@
00000000                           134              ENDM
00000000                           135              
00000000                           136  *convert D1.L (hex-value) to the ascii-hex and write into the buffer
00000000                           137  l_2ascii    MACRO
00000000                           138              MOVE.L      #$F0000000,D4       *D4 - ANDING pattern
00000000                           139              MOVE.L      #28,D7
00000000                           140  ascii_l\@   MOVE.L      D1,D6
00000000                           141              AND.L       D4,D6
00000000                           142              LSR.L       D7,D6               *shift bits to the right
00000000                           143              CMPI.B      #9,D6
00000000                           144              BLE         numbers_l\@
00000000                           145              ADDI.B      #$7,D6
00000000                           146  numbers_l\@ ADDI.B      #$30,D6
00000000                           147              MOVE.B      D6,(A1)+          *write the ascii-hex equivalent of hex-value to the buffer
00000000                           148              LSR.L       #4,D4
00000000                           149              SUBQ.B      #4,D7
00000000                           150              CMPI.B      #0,D7
00000000                           151              BGE         ascii_l\@
00000000                           152              ENDM
00000000                           153  
00000000                           154  *parsing method for the EA subroutine
00000000                           155  parsing_1   MACRO
00000000                           156              MOVE.B      (A0)+,D0
00000000                           157              MOVE.B      D0,D1               *D1 - register #
00000000                           158              MOVE.B      D0,D5               *D5 - mode
00000000                           159              ANDI.B      #%00111000,D5
00000000                           160              LSR.B       #3,D5
00000000                           161              ANDI.B      #%00000111,D1
00000000                           162              MOVE.B      D5,D3               *D3 - back-up
00000000                           163              MOVE.B      D1,D4               *D4 - back-up
00000000                           164  
00000000                           165              ADDA.W      (A6),A5             *add displacement to the beginning of table
00000000                           166              CMPI.B      #7,D5
00000000                           167              BNE         ea_check\@
00000000                           168              ADD.B       D1,D5            
00000000                           169  ea_check\@  MOVE.B      (A5)+,D1
00000000                           170              CMP.B       D5,D1
00000000                           171              BEQ         set_as_bad
00000000                           172              CMPI.B      #15,D1
00000000                           173              BNE         ea_check\@
00000000                           174                       
00000000                           175              MOVE.B      D3,D5               *Restore the value from back-up
00000000                           176              MOVE.B      D4,D1               *Restore the value from back-up
00000000                           177              ADDA.W      (A2),A0             *add jump_flag flag value to the memory pointer
00000000                           178              ENDM
00000000                           179              
00000000                           180  parsing_2   MACRO
00000000                           181              MOVE.W      D0,D1
00000000                           182              ANDI.W      #%0000111000000000,D1
00000000                           183              LSR.W       #8,D1
00000000                           184              LSR.W       #1,D1
00000000                           185              MOVE.W      D0,D2
00000000                           186              ANDI.W      #%0000000111000000,D2
00000000                           187              LSR.W       #6,D2
00000000                           188              MOVE.W      D0,D3
00000000                           189              ANDI.W      #%0000000000111000,D3
00000000                           190              LSR.W       #3,D3
00000000                           191              MOVE.W      D0,D4
00000000                           192              ANDI.W      #%0000000000000111,D4
00000000                           193              ENDM
00000000                           194  
00000000                           195  *----------------------------------------------------------------------------------------------------
00000000                           196  * System Equates
00000000                           197  *----------------------------------------------------------------------------------------------------
00000000                           198  
00000000  =00001000                199  pgm_start   EQU         $1000               *Program runs here
00000000  =000A0000                200  stack       EQU         $A0000              *Put stack here
00000000  =0000000A                201  LF          EQU         $0A                 * ASCII for line feed
00000000  =0000000D                202  CR          EQU         $0D                 * ASCII for carriage return
00000000                           203  
00000000                           204  
00000000                           205  
00000000                           206  
00000000                           207  
00000000                           208  
00000000                           209  
00000000                           210  
00000000                           211  *----------------------------------------------------------------------------------------------------
00000000                           212  * Program starts here
00000000                           213  *----------------------------------------------------------------------------------------------------
00000000                           214          
00001000                           215              ORG         pgm_start           *Program Origin
00001000  4FF9 000A0000            216              LEA         stack, SP           *Initialize the stack pointer
00001006                           217  
00001006  43F9 000031D6            218  welcome     LEA         opening,A1          * display opening message
0000100C  103C 000E                219              MOVE.B      #14,D0              * task number in D0
00001010  4E4F                     220              TRAP        #15                 * do task14
00001012                           221  
00001012  4BF9 000030FE            222  beginning   LEA         which_add,A5
00001018  6100 00E6                223              BSR         io_code             *Take the input for starting address
0000101C  1ABC 0001                224              MOVE.B      #1,(A5)             *which_add changed to 1, indicating the end address
00001020  6100 00DE                225              BSR         io_code             *Take the input for ending address
00001024  1ABC 0000                226              MOVE.B      #0,(A5)             *Reset the value
00001028                           227  
00001028  43F9 00002D8C            228              LEA         newline,A1
0000102E  103C 000D                229              MOVE.B      #13,D0
00001032  4E4F                     230              TRAP        #15            
00001034                           231              
00001034                           232              *assign the start & end address to A0 & A4                        
00001034  49F9 000030AE            233              LEA         start_addr,A4
0000103A  2014                     234              MOVE.L     (A4),D0
0000103C  2A40                     235              MOVEA.L     D0,A5            
0000103E  41D5                     236              LEA         (A5),A0             *A0 - start address
00001040  4BF9 000030D6            237              LEA         end_addr,A5
00001046  2015                     238              MOVE.L     (A5),D0
00001048  2C40                     239              MOVEA.L     D0,A6
0000104A  49D6                     240              LEA         (A6),A4             *A4 - end address
0000104C                           241  
0000104C  43F9 00003102            242              LEA         buffer,A1           *A1 - pointer to the buffer
00001052  4282                     243              CLR.L       D2                  *D2 - counter for page break
00001054                           244  
00001054  6100 030A                245  op_loop     BSR         op_code
00001058                           246              *print to console
00001058  43F9 00003102            247              LEA         buffer,A1           *Reset the buffer pointer
0000105E  103C 000D                248              MOVE.B      #13,D0
00001062  4E4F                     249              TRAP        #15
00001064                           250              
00001064  5202                     251              ADDQ.B      #1,D2
00001066                           252              *D2 MOD 25
00001066  84FC 0019                253              DIVU        #25,D2
0000106A  4842                     254              SWAP        D2                  *move the remainder to the lower-end of D2
0000106C  0282 000000FF            255              ANDI.L      #$00FF,D2           *clean up the upper-end of D2
00001072                           256  
00001072  0C02 0000                257              CMPI.B      #0,D2               *Is D2 zero or not?
00001076  6600 0020                258              BNE         check_add
0000107A                           259  
0000107A  43F9 00002D02            260  enter2con   LEA         string8,A1
00001080  103C 000E                261              MOVE.B      #14,D0
00001084  4E4F                     262              TRAP        #15
00001086                           263  
00001086  43F9 00002D8E            264              LEA         reader,A1
0000108C  103C 0002                265              MOVE.B      #2,D0
00001090  4E4F                     266              TRAP        #15
00001092                           267              
00001092  0C41 0000                268              CMPI.W      #0,D1
00001096  66E2                     269              BNE         enter2con
00001098                           270              
00001098  B9C8                     271  check_add   CMPA.L      A0,A4
0000109A  6EB8                     272              BGT         op_loop
0000109C                           273  
0000109C  43F9 00002D8C            274              LEA         newline,A1
000010A2  103C 000D                275              MOVE.B      #13,D0
000010A6  4E4F                     276              TRAP        #15
000010A8                           277              
000010A8  43F9 00002D22            278              LEA         string9,A1
000010AE  103C 000D                279              MOVE.B      #13,D0
000010B2  4E4F                     280              TRAP        #15
000010B4                           281  
000010B4  43F9 00002D8C            282              LEA         newline,A1
000010BA  103C 000D                283              MOVE.B      #13,D0
000010BE  4E4F                     284              TRAP        #15
000010C0                           285              
000010C0  43F9 00002D58            286  read_again  LEA         string10,A1
000010C6  103C 000E                287              MOVE.B      #14,D0
000010CA  4E4F                     288              TRAP        #15
000010CC                           289              
000010CC  43F9 00002D8E            290              LEA         reader,A1
000010D2  103C 0002                291              MOVE.B      #2,D0
000010D6  4E4F                     292              TRAP        #15
000010D8                           293              
000010D8  0C41 0000                294              CMPI.W      #0,D1
000010DC  6700 FF34                295              BEQ         beginning
000010E0  0C41 0001                296              CMPI.W      #1,D1
000010E4  66DA                     297              BNE         read_again
000010E6  1E11                     298              MOVE.B      (A1),D7
000010E8  0C07 0071                299              CMPI.B      #$71,D7
000010EC  6700 0008                300              BEQ         the_end
000010F0  0C07 0051                301              CMPI.B      #$51,D7
000010F4  66CA                     302              BNE         read_again            
000010F6                           303  
000010F6  103C 0009                304  the_end     MOVE.B      #9,D0               *halt console simulator
000010FA  4E4F                     305              TRAP        #15
000010FC  4E72 2700                306              STOP        #$2700
00001100                           307  
00001100                           308  *----------------------------------------------------------------------------------------------------
00001100                           309  * Program ends here
00001100                           310  *----------------------------------------------------------------------------------------------------
00001100                           311  
00001100                           312  
00001100                           313  
00001100                           314  
00001100                           315  
00001100                           316  
00001100                           317  *****************************************************************************************************
00001100                           318  * Subroutine I/O
00001100                           319  * This subroutine takes the user input and saves it to the start/end address memory variable.
00001100                           320  * During the process, multiple tests are done to check for length, validity, even boundary,
00001100                           321  * memory range, legality of the user input.
00001100                           322  *
00001100                           323  * A1 is set up as the reserved pointer for Trap #15 instruction.
00001100                           324  * A2 is set up as the pointer to the memory variable 'reader' that stores the user input
00001100                           325  * of ASCII hex values.
00001100                           326  * A3 is set up as the pointer to the memory variable 'reader2' that stores the hex equivalent
00001100                           327  * of user input in 'reader'.
00001100                           328  * A5 is set up as the pointer to the memory variable 'which_add' that indicates
00001100                           329  * either start or end address.
00001100                           330  * A6 is set up as the pointer for either start or end address memory variable.
00001100                           331  *****************************************************************************************************
00001100                           332              
00001100  48E7 FFFE                333  io_code     MOVEM.L     A0-A6/D0-D7,-(SP)   *Save the working registers on stack
00001104  4BF9 000030FE            334              LEA         which_add,A5
0000110A                           335  
0000110A  0C15 0000                336  ask_start   CMPI.B      #0,(A5)
0000110E  6600 000C                337              BNE         end_chosen1
00001112  43F9 00002B58            338              LEA         string1,A1          *start address chosen
00001118  6000 0008                339              BRA         ask_next
0000111C  43F9 00002B7E            340  end_chosen1 LEA         string2,A1          *end address chosen
00001122  103C 000E                341  ask_next    MOVE.B      #14,D0
00001126  4E4F                     342              TRAP        #15
00001128  43F9 00002D8E            343              LEA         reader,A1
0000112E  103C 0002                344              MOVE.B      #2,D0
00001132  4E4F                     345              TRAP        #15
00001134                           346  
00001134  0C41 0008                347              CMPI.W      #8,D1
00001138  6D00 01A4                348              BLT         too_short                   * if ( D1 < 8) length is too short
0000113C  6E00 01E2                349              BGT         too_long                    * if ( D1 > 8) length is too long
00001140                           350  
00001140                           351              * validity check + conversion to hex + writing to memory variable (start_addr & end_addr)
00001140  45F9 00002D8E            352  val_start   LEA         reader,A2
00001146  0C15 0000                353              CMPI.B      #0,(A5)
0000114A  6600 000C                354              BNE         end_chosen2
0000114E  4DF9 000030AE            355              LEA         start_addr,A6       *start address chosen
00001154  6000 0008                356              BRA         val_next
00001158  4DF9 000030D6            357  end_chosen2 LEA         end_addr,A6         *end address chosen
0000115E  241A                     358  val_next    MOVE.L      (A2)+,D2            * temporarily hold the ascii-hex value in D2
00001160  2C02                     359              MOVE.L      D2,D6
00001162                           360m             val_check
000011E4  241A                     361              MOVE.L      (A2)+,D2
000011E6  2C02                     362              MOVE.L      D2,D6
000011E8                           363m             val_check
0000126A                           364              
0000126A                           365              * even boundary check and converting the address to even number
0000126A  0C15 0000                366              CMPI.B      #0,(A5)
0000126E  6600 000C                367              BNE         end_chosen3
00001272  4DF9 000030AE            368              LEA         start_addr,A6       *start address chosen
00001278  6000 0008                369              BRA         bound_next
0000127C  4DF9 000030D6            370  end_chosen3 LEA         end_addr,A6         *end address chosen
00001282  2E16                     371  bound_next  MOVE.L      (A6),D7
00001284  0287 00000001            372              ANDI.L      #$00000001,D7       *Is it even or not?
0000128A  0C07 0000                373              CMPI.B      #0,D7
0000128E  6700 0018                374              BEQ         range_check
00001292  0C15 0000                375              CMPI.B      #0,(A5)             *if it's end address, move to range check
00001296  6600 0010                376              BNE         range_check            
0000129A  5396                     377              SUBI.L      #1,(A6)             *convert the address to even number
0000129C  43F9 00002C70            378              LEA         string6,A1
000012A2  103C 000D                379              MOVE.B      #13,D0
000012A6  4E4F                     380              TRAP        #15
000012A8                           381  
000012A8                           382              * memory range check
000012A8  2E16                     383  range_check MOVE.L      (A6),D7
000012AA  0287 11000000            384              ANDI.L      #$11000000,D7
000012B0  0C87 00000000            385              CMPI.L      #0,D7
000012B6  6600 0088                386              BNE         out_of_rang
000012BA                           387  
000012BA                           388              *legality check - end address should be greater or equal to start address
000012BA  0C15 0000                389  legal_check CMPI.B      #0,(A5)
000012BE  6700 0018                390              BEQ         exit_io
000012C2  4DF9 000030AE            391              LEA         start_addr,A6
000012C8  2416                     392              MOVE.L      (A6),D2
000012CA  4DF9 000030D6            393              LEA         end_addr,A6
000012D0  2616                     394              MOVE.L      (A6),D3
000012D2  9682                     395              SUB.L       D2,D3
000012D4  6B00 007A                396              BMI         illegal
000012D8                           397  
000012D8  4CDF 7FFF                398  exit_io     MOVEM.L     (SP)+, A0-A6/D0-D7  *Restore the working registers from stack
000012DC  4E75                     399              RTS
000012DE                           400            
000012DE                           401  
000012DE  0C41 0000                402  too_short   CMPI.W      #0,D1
000012E2  6700 FE26                403              BEQ         ask_start
000012E6  45F9 00002D8E            404              LEA         reader,A2
000012EC  47F9 00002F1E            405              LEA         reader2,A3
000012F2  7408                     406              MOVE.L      #8,D2
000012F4  9441                     407              SUB.W       D1,D2
000012F6  4283                     408              CLR.L       D3                  *counter for 0 adder
000012F8  16FC 0030                409  z_adder     MOVE.B      #$30,(A3)+          *write the ascii-hex value of '0' into the reader2
000012FC  5203                     410              ADDQ.B      #1,D3
000012FE  B642                     411              CMP.W       D2,D3
00001300  6DF6                     412              BLT         z_adder
00001302  4283                     413              CLR.L       D3                  *counter for r_copy
00001304  16DA                     414  r_copy      MOVE.B      (A2)+,(A3)+         *write the contents of reader into the reader2
00001306  5203                     415              ADDQ.B      #1,D3
00001308  B641                     416              CMP.W       D1,D3
0000130A  6DF8                     417              BLT         r_copy
0000130C                           418  
0000130C                           419              *copy the contents in reader2 to reader
0000130C  45F9 00002D8E            420              LEA         reader,A2
00001312  47F9 00002F1E            421              LEA         reader2,A3
00001318  24DB                     422              MOVE.L      (A3)+,(A2)+         *copy 2 Long words
0000131A  24DB                     423              MOVE.L      (A3)+,(A2)+
0000131C  6000 FE22                424              BRA         val_start
00001320                           425  
00001320                           426  
00001320  43F9 00002BA2            427  too_long    LEA         string3,A1
00001326  103C 000D                428              MOVE.B      #13,D0
0000132A  4E4F                     429              TRAP        #15
0000132C  6000 FDDC                430              BRA         ask_start
00001330  43F9 00002BE2            431  invalid     LEA         string4,A1
00001336  103C 000D                432              MOVE.B      #13,D0
0000133A  4E4F                     433              TRAP        #15
0000133C  6000 FDCC                434              BRA         ask_start
00001340  43F9 00002C28            435  out_of_rang LEA         string5,A1
00001346  103C 000D                436              MOVE.B      #13,D0
0000134A  4E4F                     437              TRAP        #15
0000134C  6000 FDBC                438              BRA         ask_start
00001350  43F9 00002CB2            439  illegal     LEA         string7,A1
00001356  103C 000D                440              MOVE.B      #13,D0
0000135A  4E4F                     441              TRAP        #15
0000135C  6000 FDAC                442              BRA         ask_start
00001360                           443  
00001360                           444  
00001360                           445  
00001360                           446  
00001360                           447  
00001360                           448  
00001360                           449  *****************************************************************************************************
00001360                           450  * Subroutine Op-Code
00001360                           451  * This subroutine disassembles the specified memory location and writes one line of instruction
00001360                           452  * to the buffer. Non-EA operands are also handled in this subroutine.
00001360                           453  *
00001360                           454  * A0 points to the memory location that will be decoded.
00001360                           455  * A1 points to the buffer that will be written.
00001360                           456  * A4 is set up as the pointer to the memory variable 'jump_flag' that stores the number of bytes,
00001360                           457  * by which the memory pointer(A0) needs to be moved before the EA subroutine starts to
00001360                           458  * decode the next memory location.
00001360                           459  * A5 points to the memory location of next case in the look-up table.
00001360                           460  * A6 points to the starting location of the look-up table.
00001360                           461  * D0 holds the memory value that this subroutine needs to decode.
00001360                           462  *****************************************************************************************************
00001360                           463  
00001360  48E7 FF3E                464  op_code     MOVEM.L     A2-A6/D0-D7,-(SP)   *Save the working registers on stack
00001364  4DF9 00001FE6            465              LEA         case_1,A6           *Set up A6 as the pointer to the instruction table
0000136A  4BF9 00002006            466              LEA         case_2,A5
00001370  49F9 000031CE            467              LEA         jump_flag,A4
00001376  22FC 20202020            468              MOVE.L      #$20202020,(A1)+    *write '    ' of ascii-hex into the buffer
0000137C  2008                     469              MOVE.L      A0,D0
0000137E  2C00                     470              MOVE.L      D0,D6               *D6 holds the original hex-value and will be used in the below MACRO
00001380  E08E                     471              LSR.L       #8,D6
00001382  E08E                     472              LSR.L       #8,D6
00001384                           473m             add2ascii
000013AA  3C00                     474              MOVE.W      D0,D6               *D6 holds the original hex-value and will be used in the below MACRO
000013AC                           475m             add2ascii
000013D2  22FC 20202020            476              MOVE.L      #$20202020,(A1)+    *write '    ' of ascii-hex into the buffer
000013D8                           477  
000013D8                           478  
000013D8  3018                     479              MOVE.W      (A0)+,D0
000013DA  B056                     480  loop_1      CMP.W       (A6),D0
000013DC  6700 00D8                481              BEQ         to_buffer_1
000013E0  DDFC 00000010            482              ADDA.L      #16,A6              *Move to next row
000013E6  BDCD                     483              CMPA.L      A5,A6
000013E8  66F0                     484              BNE         loop_1
000013EA  3200                     485  loop_2      MOVE.W      D0,D1               *To modify the value, copy D0 to D1
000013EC  0241 FFF8                486              ANDI.W      #%1111111111111000,D1
000013F0  B256                     487              CMP.W       (A6),D1
000013F2  6700 00CC                488              BEQ         to_buffer_2
000013F6  DDFC 00000010            489              ADDA.L      #16,A6              *Move to next row
000013FC  4BF9 00002256            490  loop_3      LEA         case_4,A5
00001402  3200                     491              MOVE.W      D0,D1
00001404  0241 FFC0                492              ANDI.W      #%1111111111000000,D1
00001408  B256                     493              CMP.W       (A6),D1
0000140A  6700 00D2                494              BEQ         to_buffer_3
0000140E  DDFC 00000010            495              ADDA.L      #16,A6              *Move to next row
00001414  BDCD                     496              CMPA.L      A5,A6
00001416  66E4                     497              BNE         loop_3
00001418  4BF9 000024C6            498  loop_4      LEA         case_5,A5
0000141E  3200                     499              MOVE.W      D0,D1
00001420  0241 F1C0                500              ANDI.W      #%1111000111000000,D1
00001424  B256                     501              CMP.W       (A6),D1
00001426  6700 0320                502              BEQ         to_buffer_4
0000142A  DDFC 00000010            503              ADDA.L      #16,A6              *Move to next row
00001430  BDCD                     504              CMPA.L      A5,A6
00001432  66E4                     505              BNE         loop_4            
00001434  3200                     506  loop_5      MOVE.W      D0,D1
00001436  0241 FF00                507              ANDI.W      #%1111111100000000,D1
0000143A  B256                     508              CMP.W       (A6),D1
0000143C  6700 03E2                509              BEQ         to_buffer_5
00001440  DDFC 00000010            510              ADDA.L      #16,A6              *Move to next row
00001446  4BF9 00002746            511  loop_6      LEA         case_7,A5
0000144C  3200                     512              MOVE.W      D0,D1
0000144E  0241 F1F8                513              ANDI.W      #%1111000111111000,D1
00001452  B256                     514              CMP.W       (A6),D1
00001454  6700 051C                515              BEQ         to_buffer_6
00001458  DDFC 00000010            516              ADDA.L      #16,A6              *Move to next row
0000145E  BDCD                     517              CMPA.L      A5,A6
00001460  66E4                     518              BNE         loop_6
00001462  4BF9 00002776            519  loop_7      LEA         null,A5
00001468  3200                     520              MOVE.W      D0,D1
0000146A  0241 F000                521              ANDI.W      #%1111000000000000,D1
0000146E  B256                     522              CMP.W       (A6),D1
00001470  6700 0634                523              BEQ         to_buffer_7
00001474  DDFC 00000010            524              ADDA.L      #16,A6              *Move to next row
0000147A  BDCD                     525              CMPA.L      A5,A6
0000147C  66E4                     526              BNE         loop_7
0000147E  22FC 44415441            527  data_xxxx   MOVE.L      #$44415441,(A1)+    *write 'DATA' of ascii-hex into the buffer
00001484  22FC 20202020            528              MOVE.L      #$20202020,(A1)+    *write '    ' of ascii-hex into the buffer
0000148A  3C00                     529              MOVE.W      D0,D6               *D6 holds the original hex-value and will be used in the below MACRO
0000148C                           530m             add2ascii
000014B2  6000 0666                531              BRA         exit_op
000014B6                           532  
000014B6                           533                    
000014B6  548E                     534  to_buffer_1 ADDA.L      #2,A6               *Move 1 column to the right
000014B8  22DE                     535              MOVE.L      (A6)+,(A1)+         *Write two long words to the buffer
000014BA  22DE                     536              MOVE.L      (A6)+,(A1)+
000014BC  6000 065C                537              BRA         exit_op
000014C0                           538  
000014C0  548E                     539  to_buffer_2 ADDA.L      #2,A6               *Move 1 column to the right
000014C2  22DE                     540              MOVE.L      (A6)+,(A1)+         *Write two long words that contain ascii values to the buffer
000014C4  22DE                     541              MOVE.L      (A6)+,(A1)+
000014C6                           542m             dxreg2ascii
000014DA  6000 063E                543              BRA         exit_op            
000014DE                           544  
000014DE  45F9 000031CA            545  to_buffer_3 LEA         loop_num,A2
000014E4  34BC 0003                546              MOVE.W      #3,(A2)             *Save the current loop number in case there's a bad flag
000014E8  548E                     547              ADDA.L      #2,A6               *Move 1 column to the right
000014EA  2448                     548              MOVEA.L     A0,A2               *Save A0 to A2 as a back-up
000014EC  22DE                     549              MOVE.L      (A6)+,(A1)+         *Write two long words that contain ascii values to the buffer
000014EE  22DE                     550              MOVE.L      (A6)+,(A1)+
000014F0  341E                     551              MOVE.W      (A6)+,D2            *D2 holds the syntax pattern number
000014F2  361E                     552              MOVE.W      (A6)+,D3            *D3 temporarily holds the imme_flag value
000014F4  47F9 000031D4            553              LEA         dis_table,A3        *displacement of first column for each instruction in ea_table
000014FA  3696                     554              MOVE.W      (A6),(A3)
000014FC  0C43 0000                555              CMPI.W      #0,D3
00001500  6700 000A                556              BEQ         skip_imme_1
00001504  47F9 000031D0            557              LEA         imme_flag,A3
0000150A  3683                     558              MOVE.W      D3,(A3)
0000150C  0C42 0000                559  skip_imme_1 CMPI.W      #$0000,D2
00001510  6600 0014                560              BNE         next_3_1
00001514                           561              * 0000 case - <ea>
00001514  204A                     562              MOVEA.L     A2,A0               *Restore to the end point of memory instruction
00001516  5388                     563              SUBA.L      #1,A0               *move back 1 byte the pointer to memory to decode
00001518  38BC 0000                564              MOVE.W      #$0000,(A4)         *jump_flag - 0000
0000151C  4EB9 00001B88            565              JSR         e_a
00001522  6000 05F6                566              BRA         exit_op
00001526                           567              
00001526  0C42 0001                568  next_3_1    CMPI.W      #$0001,D2
0000152A  6600 0044                569              BNE         next_3_2
0000152E                           570              * 0001 case - (.B) #$<hex-value>, <ea>
0000152E  32FC 2324                571              MOVE.W      #$2324,(A1)+        *write '#$' of ascii-hex into the buffer
00001532  3218                     572              MOVE.W      (A0)+,D1            *read the immediate value from the memory
00001534                           573m             w_2ascii
0000155A                           574              
0000155A  32FC 2C20                575              MOVE.W      #$2C20,(A1)+        *write ',' and ' ' (space) of ascii-hex into the buffer            
0000155E  204A                     576              MOVEA.L     A2,A0               *Restore to the end point of memory instruction
00001560  5388                     577              SUBA.L      #1,A0               *move back 1 byte the pointer to memory to decode
00001562  38BC 0002                578              MOVE.W      #$0002,(A4)         *jump_flag - 0002
00001566  4EB9 00001B88            579              JSR         e_a
0000156C  6000 05AC                580              BRA         exit_op
00001570                           581  
00001570  0C42 0002                582  next_3_2    CMPI.W      #$0002,D2
00001574  6600 0044                583              BNE         next_3_3
00001578                           584              * 0002 case - (.W) #$<hex-value>, <ea>
00001578  32FC 2324                585              MOVE.W      #$2324,(A1)+        *write '#$' of ascii-hex into the buffer
0000157C  3218                     586              MOVE.W      (A0)+,D1            *read the immediate value from the memory
0000157E                           587m             w_2ascii
000015A4  32FC 2C20                588              MOVE.W      #$2C20,(A1)+        *write ',' and ' ' (space) of ascii-hex into the buffer
000015A8  204A                     589              MOVEA.L     A2,A0               *Restore to the end point of memory instruction
000015AA  5388                     590              SUBA.L      #1,A0               *move back 1 byte the pointer to memory to decode
000015AC  38BC 0002                591              MOVE.W      #$0002,(A4)         *jump_flag - 0002
000015B0  4EB9 00001B88            592              JSR         e_a
000015B6  6000 0562                593              BRA         exit_op
000015BA                           594  
000015BA  0C42 0003                595  next_3_3    CMPI.W      #$0003,D2
000015BE  6600 0046                596              BNE         next_3_4
000015C2                           597              * 0003 case - (.L) #$<hex-value>, <ea>
000015C2  32FC 2324                598              MOVE.W      #$2324,(A1)+        *write '#$' of ascii-hex into the buffer
000015C6  2218                     599              MOVE.L      (A0)+,D1            *read the immediate value from the memory
000015C8                           600m             l_2ascii
000015F0  32FC 2C20                601              MOVE.W      #$2C20,(A1)+        *write ',' and ' ' (space) of ascii-hex into the buffer
000015F4  204A                     602              MOVEA.L     A2,A0               *Restore to the end point of memory instruction
000015F6  5388                     603              SUBA.L      #1,A0               *move back 1 byte the pointer to memory to decode
000015F8  38BC 0004                604              MOVE.W      #$0004,(A4)         *jump_flag - 0004
000015FC  4EB9 00001B88            605              JSR         e_a
00001602  6000 0516                606              BRA         exit_op
00001606                           607  
00001606                           608              
00001606  0C42 0004                609  next_3_4    CMPI.W      #$0004,D2
0000160A  6600 00CA                610              BNE         next_3_5
0000160E                           611              * 0004 case - <register list>, <ea>
0000160E  4284                     612              CLR.L       D4                  *D4 holds the counter for mask_loop
00001610  3610                     613              MOVE.W      (A0),D3             *D3 holds the register list mask
00001612  3200                     614              MOVE.W      D0,D1
00001614  0241 0038                615              ANDI.W      #%0000000000111000,D1
00001618  E649                     616              LSR.W       #3,D1
0000161A  B23C 0004                617              CMP.B       #%100,D1            *Is it the predecrement addressing mode?
0000161E  6600 005C                618              BNE         not_pre
00001622                           619              *reverse mask list case
00001622  3C3C 8000                620              MOVE.W      #%1000000000000000,D6
00001626  7E01                     621              MOVE.L      #1,D7               *D7 - bit shift number
00001628  3203                     622  r_mask_loop MOVE.W      D3,D1
0000162A  C246                     623              AND.W       D6,D1
0000162C  EF79                     624              ROL.W       D7,D1
0000162E  0C41 0000                625              CMPI.W      #0,D1
00001632  6700 0024                626              BEQ         r_mask_next
00001636  2A04                     627              MOVE.L      D4,D5
00001638  0C05 0007                628              CMPI.B      #7,D5
0000163C  6E00 000A                629              BGT         r_write_a         
00001640  12FC 0044                630              MOVE.B      #$44,(A1)+          *write the ascii-hex value of 'D' into the buffer
00001644  6000 0008                631              BRA         r_write_num
00001648  12FC 0041                632  r_write_a   MOVE.B      #$41,(A1)+          *write the ascii-hex value of 'A' into the buffer
0000164C  5105                     633              SUBI.B      #8,D5
0000164E  0605 0030                634  r_write_num ADDI.B      #$30,D5
00001652  12C5                     635              MOVE.B      D5,(A1)+            *write the ascii-hex value into the buffer
00001654  32FC 2F20                636              MOVE.W      #$2F20,(A1)+        *write '/' and ' ' (space) of ascii-hex into the buffer            
00001658  E25E                     637  r_mask_next ROR.W       #1,D6
0000165A  5204                     638              ADDQ.B      #1,D4
0000165C  5207                     639              ADDQ.B      #1,D7
0000165E  0C04 0010                640              CMPI.B      #16,D4
00001662  66C4                     641              BNE         r_mask_loop
00001664  5589                     642              SUBA.L      #2,A1               *delete the last '/' and ' ' (space) from the buffer
00001666  32FC 2C20                643              MOVE.W      #$2C20,(A1)+        *write ',' and ' ' (space) of ascii-hex into the buffer
0000166A  204A                     644              MOVEA.L     A2,A0               *Restore to the end point of memory instruction
0000166C  5388                     645              SUBA.L      #1,A0               *move back 1 byte the pointer to memory to decode
0000166E  38BC 0002                646              MOVE.W      #$0002,(A4)         *jump_flag - 0002
00001672  4EB9 00001B88            647              JSR         e_a
00001678  6000 04A0                648              BRA         exit_op
0000167C                           649  
0000167C  3C3C 0001                650  not_pre     MOVE.W      #%0000000000000001,D6
00001680  4287                     651              CLR.L       D7                  *D7 - bit shift number
00001682  3203                     652  mask_loop_1 MOVE.W      D3,D1
00001684  C246                     653              AND.W       D6,D1
00001686  EE69                     654              LSR.W       D7,D1
00001688  0C41 0000                655              CMPI.W      #0,D1
0000168C  6700 0024                656              BEQ         mask_next_1
00001690  2A04                     657              MOVE.L      D4,D5               *D5 - temporary variable that stores the counter value
00001692  0C05 0007                658              CMPI.B      #7,D5
00001696  6E00 000A                659              BGT         write_a_1       
0000169A  12FC 0044                660              MOVE.B      #$44,(A1)+          *write the ascii-hex value of 'D' into the buffer
0000169E  6000 0008                661              BRA         write_num_1
000016A2  12FC 0041                662  write_a_1   MOVE.B      #$41,(A1)+          *write the ascii-hex value of 'A' into the buffer
000016A6  5105                     663              SUBI.B      #8,D5
000016A8  0605 0030                664  write_num_1 ADDI.B      #$30,D5
000016AC  12C5                     665              MOVE.B      D5,(A1)+            *write the ascii-hex value into the buffer
000016AE  32FC 2F20                666              MOVE.W      #$2F20,(A1)+        *write '/' and ' ' (space) of ascii-hex into the buffer            
000016B2  E35E                     667  mask_next_1 ROL.W       #1,D6
000016B4  5204                     668              ADDQ.B      #1,D4
000016B6  5207                     669              ADDQ.B      #1,D7
000016B8  0C04 0010                670              CMPI.B      #16,D4
000016BC  66C4                     671              BNE         mask_loop_1
000016BE  5589                     672              SUBA.L      #2,A1               *delete the last '/' and ' ' (space) from the buffer
000016C0  32FC 2C20                673              MOVE.W      #$2C20,(A1)+        *write ',' and ' ' (space) of ascii-hex into the buffer
000016C4  204A                     674              MOVEA.L     A2,A0               *Restore to the end point of memory instruction
000016C6  5388                     675              SUBA.L      #1,A0               *move back 1 byte the pointer to memory to decode
000016C8  38BC 0002                676              MOVE.W      #$0002,(A4)         *jump_flag - 0002
000016CC  4EB9 00001B88            677              JSR         e_a
000016D2  6000 0446                678              BRA         exit_op
000016D6                           679  
000016D6                           680  
000016D6                           681              * 0005 case - <ea>, <register list>
000016D6  204A                     682  next_3_5    MOVEA.L     A2,A0               *Restore to the end point of memory instruction
000016D8  5388                     683              SUBA.L      #1,A0               *move back 1 byte the pointer to memory to decode
000016DA  38BC 0002                684              MOVE.W      #$0002,(A4)         *jump_flag - 0002
000016DE  4EB9 00001B88            685              JSR         e_a
000016E4                           686              *check for the bad_flag
000016E4  47F9 000031CC            687              LEA         bad_flag,A3
000016EA  0C53 0000                688              CMPI.W      #0,(A3)
000016EE  6600 042A                689              BNE         exit_op
000016F2                           690              
000016F2  2648                     691              MOVEA.L     A0,A3               *Save A0 to A3 as a back-up (which is the starting point for next instruction)
000016F4  32FC 2C20                692              MOVE.W      #$2C20,(A1)+        *write ',' and ' ' (space) of ascii-hex into the buffer
000016F8                           693              
000016F8  204A                     694              MOVEA.L     A2,A0               *Restore to the end point of memory instruction
000016FA  4284                     695              CLR.L       D4                  *D4 holds the counter for mask_loop
000016FC  3610                     696              MOVE.W      (A0),D3             *D3 holds the register list mask
000016FE  3C3C 0001                697              MOVE.W      #%0000000000000001,D6
00001702  4287                     698              CLR.L       D7                  *D7 - bit shift number
00001704  3203                     699  mask_loop_2 MOVE.W      D3,D1
00001706  C246                     700              AND.W       D6,D1
00001708  EE69                     701              LSR.W       D7,D1
0000170A  0C41 0000                702              CMPI.W      #0,D1
0000170E  6700 0024                703              BEQ         mask_next_2
00001712  2A04                     704              MOVE.L      D4,D5               *D5 - temporary variable that stores the counter value
00001714  0C05 0007                705              CMPI.B      #7,D5
00001718  6E00 000A                706              BGT         write_a_2        
0000171C  12FC 0044                707              MOVE.B      #$44,(A1)+          *write the ascii-hex value of 'D' into the buffer
00001720  6000 0008                708              BRA         write_num_2
00001724  12FC 0041                709  write_a_2   MOVE.B      #$41,(A1)+          *write the ascii-hex value of 'A' into the buffer
00001728  5105                     710              SUBI.B      #8,D5
0000172A  0605 0030                711  write_num_2 ADDI.B      #$30,D5
0000172E  12C5                     712              MOVE.B      D5,(A1)+            *write the ascii-hex value into the buffer
00001730  32FC 2F20                713              MOVE.W      #$2F20,(A1)+        *write '/' and ' ' (space) of ascii-hex into the buffer            
00001734  E35E                     714  mask_next_2 ROL.W       #1,D6
00001736  5204                     715              ADDQ.B      #1,D4
00001738  5207                     716              ADDQ.B      #1,D7
0000173A  0C04 0010                717              CMPI.B      #16,D4
0000173E  66C4                     718              BNE         mask_loop_2
00001740  5589                     719              SUBA.L      #2,A1               *delete the last '/' and ' ' (space) from the buffer            
00001742  204B                     720              MOVEA.L     A3,A0               *Restore to the starting point of the next instruction
00001744  6000 03D4                721              BRA         exit_op
00001748                           722  
00001748                           723  
00001748                           724  
00001748  45F9 000031CA            725  to_buffer_4 LEA         loop_num,A2
0000174E  34BC 0004                726              MOVE.W      #4,(A2)             *Save the current loop number in case there's a bad flag
00001752  548E                     727              ADDA.L      #2,A6               *Move 1 column to the right
00001754  2448                     728              MOVEA.L     A0,A2               *Save A0 to A2 as a back-up
00001756  22DE                     729              MOVE.L      (A6)+,(A1)+         *Write two long words that contain ascii values to the buffer
00001758  22DE                     730              MOVE.L      (A6)+,(A1)+
0000175A  341E                     731              MOVE.W      (A6)+,D2            *D2 holds the syntax pattern number
0000175C  361E                     732              MOVE.W      (A6)+,D3            *D3 temporarily holds the imme_flag value
0000175E  47F9 000031D4            733              LEA         dis_table,A3        *displacement of first column for each instruction in ea_table
00001764  3696                     734              MOVE.W      (A6),(A3)
00001766  0C43 0000                735              CMPI.W      #0,D3
0000176A  6700 000A                736              BEQ         skip_imme_2
0000176E  47F9 000031D0            737              LEA         imme_flag,A3
00001774  3683                     738              MOVE.W      D3,(A3)
00001776  0C42 0000                739  skip_imme_2 CMPI.W      #$0000,D2
0000177A  6600 003A                740              BNE         next_4_1
0000177E                           741              * 0000 case - <ea>, Dn
0000177E  204A                     742              MOVEA.L     A2,A0               *Restore to the end point of memory instruction
00001780  5388                     743              SUBA.L      #1,A0               *move back 1 byte the pointer to memory to decode
00001782  38BC 0000                744              MOVE.W      #$0000,(A4)         *jump_flag - 0000
00001786  4EB9 00001B88            745              JSR         e_a
0000178C                           746              *check for the bad_flag
0000178C  47F9 000031CC            747              LEA         bad_flag,A3
00001792  0C53 0000                748              CMPI.W      #0,(A3)
00001796  6600 0382                749              BNE         exit_op
0000179A                           750              
0000179A  32FC 2C20                751              MOVE.W      #$2C20,(A1)+        *write ',' and ' ' (space) of ascii-hex into the buffer
0000179E                           752m             dxreg2ascii
000017B2  6000 0366                753              BRA         exit_op
000017B6                           754              
000017B6  0C42 0001                755  next_4_1    CMPI.W      #$0001,D2
000017BA  6600 002C                756              BNE         next_4_2
000017BE                           757              * 0001 case - Dn, <ea>
000017BE                           758m             dxreg2ascii
000017D2  32FC 2C20                759              MOVE.W      #$2C20,(A1)+        *write ',' and ' ' (space) of ascii-hex into the buffer
000017D6  204A                     760              MOVEA.L     A2,A0               *Restore to the end point of memory instruction
000017D8  5388                     761              SUBA.L      #1,A0               *move back 1 byte the pointer to memory to decode
000017DA  38BC 0000                762              MOVE.W      #$0000,(A4)         *jump_flag - 0000
000017DE  4EB9 00001B88            763              JSR         e_a                 *call e_a subroutine to fill the e.a. into the buffer
000017E4  6000 0334                764              BRA         exit_op
000017E8                           765              
000017E8                           766              * 0002 case - <ea>, An
000017E8  204A                     767  next_4_2    MOVEA.L     A2,A0               *Restore to the end point of memory instruction
000017EA  5388                     768              SUBA.L      #1,A0               *move back 1 byte the pointer to memory to decode
000017EC  38BC 0000                769              MOVE.W      #$0000,(A4)         *jump_flag - 0000
000017F0  4EB9 00001B88            770              JSR         e_a
000017F6                           771              *check for the bad_flag
000017F6  47F9 000031CC            772              LEA         bad_flag,A3
000017FC  0C53 0000                773              CMPI.W      #0,(A3)
00001800  6600 0318                774              BNE         exit_op
00001804                           775              
00001804  32FC 2C20                776              MOVE.W      #$2C20,(A1)+        *write ',' and ' ' (space) of ascii-hex into the buffer
00001808  12FC 0041                777              MOVE.B      #$41,(A1)+          *write the ascii-hex value of 'A' into the buffer            
0000180C                           778m             oxreg2ascii
0000181C  6000 02FC                779              BRA         exit_op
00001820                           780  
00001820                           781  
00001820  548E                     782  to_buffer_5 ADDA.L      #2,A6               *Move 1 column to the right
00001822  2448                     783              MOVEA.L     A0,A2               *Save A0 to A2 as a back-up
00001824  22DE                     784              MOVE.L      (A6)+,(A1)+         *Write two long words that contain ascii values to the buffer
00001826  22DE                     785              MOVE.L      (A6)+,(A1)+
00001828  341E                     786              MOVE.W      (A6)+,D2            *D2 holds the syntax pattern number
0000182A  361E                     787              MOVE.W      (A6)+,D3            *D3 temporarily holds the imme_flag value
0000182C  47F9 000031D4            788              LEA         dis_table,A3        *displacement of first column for each instruction in ea_table
00001832  3696                     789              MOVE.W      (A6),(A3)
00001834  0C43 0000                790              CMPI.W      #0,D3
00001838  6700 000A                791              BEQ         skip_imme_3
0000183C  47F9 000031D0            792              LEA         imme_flag,A3
00001842  3683                     793              MOVE.W      D3,(A3)
00001844  4283                     794  skip_imme_3 CLR.L       D3
00001846  0C02 00FF                795              CMPI.B      #$FF,D2
0000184A  6600 0062                796              BNE         next_5_1
0000184E                           797              * #$FF case - 32 bit displacement
0000184E  5488                     798              ADDA.L      #2,A0
00001850  2808                     799              MOVE.L      A0,D4               *D4 holds the address right before the displacement
00001852  2618                     800              MOVE.L      (A0)+,D3            *D3 holds the displacement
00001854  D883                     801              ADD.L       D3,D4               *D4 holds the memory address to branch to
00001856  2C04                     802              MOVE.L      D4,D6               *D6 holds the original hex-value and will be used in the below MACRO
00001858  E08E                     803              LSR.L       #8,D6
0000185A  E08E                     804              LSR.L       #8,D6
0000185C                           805m             add2ascii
00001882  3C04                     806              MOVE.W      D4,D6               *D6 holds the original hex-value and will be used in the below MACRO
00001884                           807m             add2ascii
000018AA  6000 026E                808              BRA         exit_op
000018AE                           809  
000018AE  0C02 0000                810  next_5_1    CMPI.B      #$00,D2
000018B2  6600 0060                811              BNE         next_5_2
000018B6                           812              * #$00 case - 16 bit displacement
000018B6  2808                     813              MOVE.L      A0,D4               *D4 holds the address right before the displacement
000018B8  3618                     814              MOVE.W      (A0)+,D3            *D3 holds the displacement
000018BA  D843                     815              ADD.W       D3,D4               *D4 holds the memory address to branch to
000018BC  2C04                     816              MOVE.L      D4,D6               *D6 holds the original hex-value and will be used in the below MACRO
000018BE  E08E                     817              LSR.L       #8,D6
000018C0  E08E                     818              LSR.L       #8,D6
000018C2                           819m             add2ascii
000018E8  3C04                     820              MOVE.W      D4,D6               *D6 holds the original hex-value and will be used in the below MACRO
000018EA                           821m             add2ascii
00001910  6000 0208                822              BRA         exit_op
00001914                           823                          
00001914                           824              * case - 8 bit displacement
00001914  2808                     825  next_5_2    MOVE.L      A0,D4               *D4 holds the address right before the displacement
00001916  1602                     826              MOVE.B      D2,D3               *D3 holds the displacement
00001918  D803                     827              ADD.B       D3,D4               *D4 holds the memory address to branch to
0000191A  2C04                     828              MOVE.L      D4,D6               *D6 holds the original hex-value and will be used in the below MACRO
0000191C  E08E                     829              LSR.L       #8,D6
0000191E  E08E                     830              LSR.L       #8,D6
00001920                           831m             add2ascii
00001946  3C04                     832              MOVE.W      D4,D6               *D6 holds the original hex-value and will be used in the below MACRO
00001948                           833m             add2ascii
0000196E  6000 01AA                834              BRA         exit_op
00001972                           835  
00001972  45F9 000031CA            836  to_buffer_6 LEA         loop_num,A2
00001978  34BC 0006                837              MOVE.W      #6,(A2)             *Save the current loop number in case there's a bad flag
0000197C  548E                     838              ADDA.L      #2,A6               *Move 1 column to the right
0000197E  2448                     839              MOVEA.L     A0,A2               *Save A0 to A2 as a back-up
00001980  22DE                     840              MOVE.L      (A6)+,(A1)+         *Write two long words that contain ascii values to the buffer
00001982  22DE                     841              MOVE.L      (A6)+,(A1)+
00001984  341E                     842              MOVE.W      (A6)+,D2            *D2 holds the syntax pattern number
00001986  361E                     843              MOVE.W      (A6)+,D3            *D3 temporarily holds the imme_flag value
00001988  47F9 000031D4            844              LEA         dis_table,A3        *displacement of first column for each instruction in ea_table
0000198E  3696                     845              MOVE.W      (A6),(A3)
00001990  0C43 0000                846              CMPI.W      #0,D3
00001994  6700 000A                847              BEQ         skip_imme_4
00001998  47F9 000031D0            848              LEA         imme_flag,A3
0000199E  3683                     849              MOVE.W      D3,(A3)
000019A0  0C42 0000                850  skip_imme_4 CMPI.W      #$0000,D2
000019A4  6600 0038                851              BNE         next_6_1
000019A8                           852              * 0000 case - (I) # <decimal>, Dy
000019A8  12FC 0023                853              MOVE.B      #$23,(A1)+        *write '#' of ascii-hex into the buffer
000019AC                           854  
000019AC  3200                     855              MOVE.W      D0,D1
000019AE  0241 0E00                856              ANDI.W      #%0000111000000000,D1
000019B2  E049                     857              LSR.W       #8,D1
000019B4  E249                     858              LSR.W       #1,D1
000019B6  0601 0030                859              ADDI.B      #$30,D1
000019BA  0C01 0030                860              CMPI.B      #$30,D1
000019BE  6600 0004                861              BNE         one2seven
000019C2  5001                     862              ADDI.B      #$8,D1
000019C4  12C1                     863  one2seven   MOVE.B      D1,(A1)+            *write the ascii-hex value into the buffer
000019C6                           864  
000019C6  32FC 2C20                865              MOVE.W      #$2C20,(A1)+        *write ',' and ' ' (space) of ascii-hex into the buffer
000019CA                           866m             dyreg2ascii
000019DA  6000 013E                867              BRA         exit_op
000019DE                           868              
000019DE  0C42 0001                869  next_6_1    CMPI.W      #$0001,D2
000019E2  6600 002E                870              BNE         next_6_2
000019E6                           871              * 0001 case - (R) Dx, Dy
000019E6                           872m             dxreg2ascii
000019FA  32FC 2C20                873              MOVE.W      #$2C20,(A1)+        *write ',' and ' ' (space) of ascii-hex into the buffer
000019FE                           874m             dyreg2ascii
00001A0E  6000 010A                875              BRA         exit_op
00001A12                           876  
00001A12  0C42 0002                877  next_6_2    CMPI.W      #$0002,D2
00001A16  6600 002E                878              BNE         next_6_3
00001A1A                           879              * 0002 case - Dx, Dy
00001A1A  12FC 0044                880              MOVE.B      #$44,(A1)+          *write the ascii-hex value of 'D' into the buffer
00001A1E                           881m             oxreg2ascii
00001A2E  32FC 2C20                882              MOVE.W      #$2C20,(A1)+        *write ',' and ' ' (space) of ascii-hex into the buffer
00001A32  12FC 0044                883              MOVE.B      #$44,(A1)+          *write the ascii-hex value of 'D' into the buffer
00001A36                           884m             oyreg2ascii
00001A42  6000 00D6                885              BRA         exit_op
00001A46                           886              
00001A46  0C42 0003                887  next_6_3    CMPI.W      #$0003,D2
00001A4A  6600 002E                888              BNE         next_6_4
00001A4E                           889              * 0003 case - Ax, Ay
00001A4E  12FC 0041                890              MOVE.B      #$41,(A1)+          *write the ascii-hex value of 'A' into the buffer
00001A52                           891m             oxreg2ascii
00001A62  32FC 2C20                892              MOVE.W      #$2C20,(A1)+        *write ',' and ' ' (space) of ascii-hex into the buffer
00001A66  12FC 0041                893              MOVE.B      #$41,(A1)+          *write the ascii-hex value of 'A' into the buffer
00001A6A                           894m             oyreg2ascii
00001A76  6000 00A2                895              BRA         exit_op
00001A7A                           896  
00001A7A                           897              * 0004 case - Dx, Ay
00001A7A  12FC 0044                898  next_6_4    MOVE.B      #$44,(A1)+          *write the ascii-hex value of 'D' into the buffer
00001A7E                           899m             oxreg2ascii
00001A8E  32FC 2C20                900              MOVE.W      #$2C20,(A1)+        *write ',' and ' ' (space) of ascii-hex into the buffer
00001A92  12FC 0041                901              MOVE.B      #$41,(A1)+          *write the ascii-hex value of 'A' into the buffer
00001A96                           902m             oyreg2ascii
00001AA2  6000 0076                903              BRA         exit_op
00001AA6                           904  
00001AA6                           905  
00001AA6  45F9 000031CA            906  to_buffer_7 LEA         loop_num,A2
00001AAC  34BC 0007                907              MOVE.W      #7,(A2)             *Save the current loop number in case there's a bad flag
00001AB0  548E                     908              ADDA.L      #2,A6               *Move 1 column to the right
00001AB2  2448                     909              MOVEA.L     A0,A2               *Save A0 to A2 as a back-up
00001AB4  22DE                     910              MOVE.L      (A6)+,(A1)+         *Write two long words that contain ascii values to the buffer
00001AB6  22DE                     911              MOVE.L      (A6)+,(A1)+
00001AB8  341E                     912              MOVE.W      (A6)+,D2            *D2 holds the syntax pattern number
00001ABA  361E                     913              MOVE.W      (A6)+,D3            *D3 temporarily holds the imme_flag value
00001ABC  47F9 000031D4            914              LEA         dis_table,A3        *displacement of first column for each instruction in ea_table
00001AC2  3696                     915              MOVE.W      (A6),(A3)
00001AC4  0C43 0000                916              CMPI.W      #0,D3
00001AC8  6700 000A                917              BEQ         skip_imme_5
00001ACC  47F9 000031D0            918              LEA         imme_flag,A3
00001AD2  3683                     919              MOVE.W      D3,(A3)
00001AD4  0C42 0000                920  skip_imme_5 CMPI.W      #$0000,D2
00001AD8  6600 0014                921              BNE         next_7_1
00001ADC                           922              * 0000 case - (.B)
00001ADC  204A                     923              MOVEA.L     A2,A0               *Restore to the end point of memory instruction
00001ADE  5588                     924              SUBA.L      #2,A0               *move back 2 byte the pointer to memory to decode
00001AE0  38BC 0005                925              MOVE.W      #$0005,(A4)         *jump_flag - 0005
00001AE4  4EB9 00001B88            926              JSR         e_a
00001AEA  6000 002E                927              BRA         exit_op
00001AEE                           928  
00001AEE  0C42 0001                929  next_7_1    CMPI.W      #$0001,D2
00001AF2  6600 0014                930              BNE         next_7_2
00001AF6                           931              * 0001 case - (.W)
00001AF6  204A                     932              MOVEA.L     A2,A0               *Restore to the end point of memory instruction
00001AF8  5588                     933              SUBA.L      #2,A0               *move back 2 byte the pointer to memory to decode
00001AFA  38BC 0006                934              MOVE.W      #$0006,(A4)         *jump_flag - 0006
00001AFE  4EB9 00001B88            935              JSR         e_a
00001B04  6000 0014                936              BRA         exit_op
00001B08                           937              
00001B08                           938              * 0002 case - (.L)
00001B08  204A                     939  next_7_2    MOVEA.L     A2,A0               *Restore to the end point of memory instruction
00001B0A  5588                     940              SUBA.L      #2,A0               *move back 2 byte the pointer to memory to decode
00001B0C  38BC 0007                941              MOVE.W      #$0007,(A4)         *jump_flag - 0007
00001B10  4EB9 00001B88            942              JSR         e_a
00001B16  6000 0002                943              BRA         exit_op
00001B1A                           944  
00001B1A                           945  
00001B1A                           946              *check for the bad_flag
00001B1A  45F9 000031CC            947  exit_op     LEA         bad_flag,A2
00001B20  0C52 0000                948              CMPI.W      #0,(A2)
00001B24  6700 0058                949              BEQ         good_data
00001B28                           950  
00001B28                           951              *bad data
00001B28  34BC 0000                952              MOVE.W      #0,(A2)             *reset the bag_flag
00001B2C  43F9 00003102            953              LEA         buffer,A1
00001B32  D3FC 00000010            954              ADDA.L      #16,A1              *adjust the buffer pointer
00001B38                           955  
00001B38  45F9 000031CA            956              LEA         loop_num,A2
00001B3E  0C52 0003                957              CMPI.W      #3,(A2)
00001B42  6600 000C                958              BNE         is_it_4
00001B46  4DF9 00002256            959              LEA         case_4,A6
00001B4C  6000 F8CA                960              BRA         loop_4
00001B50  0C52 0004                961  is_it_4     CMPI.W      #4,(A2)
00001B54  6600 000C                962              BNE         is_it_6
00001B58  4DF9 000024C6            963              LEA         case_5,A6
00001B5E  6000 F8D4                964              BRA         loop_5
00001B62  0C52 0006                965  is_it_6     CMPI.W      #6,(A2)
00001B66  6600 000C                966              BNE         is_it_7
00001B6A  4DF9 00002746            967              LEA         case_7,A6
00001B70  6000 F8F0                968              BRA         loop_7
00001B74  4DF9 00002776            969  is_it_7     LEA         null,A6
00001B7A  6000 F902                970              BRA         data_xxxx            
00001B7E  32FC 0000                971  good_data   MOVE.W      #$0000,(A1)+        *write '0'(null) of ascii-hex into the buffer
00001B82  4CDF 7CFF                972              MOVEM.L     (SP)+, A2-A6/D0-D7  *Restore the working registers from stack
00001B86  4E75                     973              RTS                             *Return to the program
00001B88                           974  
00001B88                           975  
00001B88                           976  
00001B88                           977  
00001B88                           978  
00001B88                           979  
00001B88                           980  ***************************************************************************************************
00001B88                           981  * Subroutine EA
00001B88                           982  * This subroutine decodes the EA part of instruction and writes the EA to the buffer.
00001B88                           983  * This subroutine is invoked by Op-Code subroutine in the middle of Op-Code.
00001B88                           984  *
00001B88                           985  * A0 points to the memory location that will be decoded. 
00001B88                           986  * A1 points to the buffer that will be written.
00001B88                           987  * A2 is set up as the pointer to the memory variable 'jump_flag' that stores the number of bytes,
00001B88                           988  * by which the memory pointer(A0) needs to be moved before this subroutine starts to
00001B88                           989  * decode the next memory location.
00001B88                           990  * A3 is set up as the pointer to the memory variable 'move_flag' that indicates
00001B88                           991  * whether or not the EA is for the MOVE instruction.
00001B88                           992  * A4 is set up as the pointer to the memory variable 'bad_flag' that indicates
00001B88                           993  * whether or not the mode bit is valid.
00001B88                           994  * A5 points to the starting location of the ea_table.
00001B88                           995  * A6 is set up as the pointer to the memory variable 'dis_table' that
00001B88                           996  * stores the displacement values from the starting address of ea_table,
00001B88                           997  * indicating the first column of the specified instruction.
00001B88                           998  * D0 holds the memory value that this subroutine needs to decode.
00001B88                           999  ***************************************************************************************************
00001B88                          1000  
00001B88  48E7 FF3E               1001  e_a         MOVEM.L     A2-A6/D0-D7,-(SP)
00001B8C  45F9 000031CE           1002              LEA         jump_flag,A2
00001B92  49F9 000031CC           1003              LEA         bad_flag,A4
00001B98  4BF9 00002778           1004              LEA         ea_table,A5
00001B9E  4DF9 000031D4           1005              LEA         dis_table,A6
00001BA4  3412                    1006              MOVE.W      (A2),D2
00001BA6                          1007  
00001BA6  0C42 0004               1008              CMPI.W      #4,D2               *is it MOVE instruction or not?
00001BAA  6E00 003A               1009              BGT         ea_move
00001BAE                          1010m             parsing_1            
00001BE2  6000 0088               1011              BRA         ea2buffer
00001BE6  3018                    1012  ea_move     MOVE.W      (A0)+,D0            *done only once and stored in D0
00001BE8                          1013m             parsing_2
00001C08  3A03                    1014              MOVE.W      D3,D5
00001C0A  3204                    1015              MOVE.W      D4,D1
00001C0C  47F9 000031D2           1016              LEA         move_flag,A3
00001C12  36BC 0001               1017              MOVE.W      #1,(A3)
00001C16  6000 0054               1018              BRA         ea2buffer
00001C1A  32FC 2C20               1019  ea_move_d   MOVE.W      #$2C20,(A1)+        *write ',' and ' ' (space) of ascii-hex into the buffer
00001C1E                          1020m             parsing_2
00001C3E  3801                    1021              MOVE.W      D1,D4
00001C40  3602                    1022              MOVE.W      D2,D3
00001C42  3A02                    1023              MOVE.W      D2,D5
00001C44  47F9 000031D2           1024              LEA         move_flag,A3
00001C4A  36BC 0000               1025              MOVE.W      #0,(A3)
00001C4E  6000 001C               1026              BRA         ea2buffer
00001C52                          1027              
00001C52  38BC 0001               1028  set_as_bad  MOVE.W      #1,(A4)
00001C56  6000 000E               1029              BRA         ea_exit_2
00001C5A                          1030              
00001C5A  47F9 000031D2           1031  ea_exit     LEA         move_flag,A3
00001C60  0C53 0000               1032              CMPI.W      #0,(A3)
00001C64  66B4                    1033              BNE         ea_move_d
00001C66  4CDF 7CFF               1034  ea_exit_2   MOVEM.L     (SP)+, A2-A6/D0-D7
00001C6A  4E75                    1035              RTS
00001C6C                          1036  
00001C6C  0C45 0000               1037  ea2buffer   CMPI.W      #%000,D5
00001C70  6600 000E               1038              BNE         ea2b_1
00001C74  12FC 0044               1039              MOVE.B      #$44,(A1)+          *write the ascii-hex value of 'D' into the buffer
00001C78  0601 0030               1040              ADDI.B      #$30,D1
00001C7C  12C1                    1041              MOVE.B      D1,(A1)+            *write the ascii-hex value of '0~7' into the buffer
00001C7E  60DA                    1042              BRA         ea_exit
00001C80  0C45 0001               1043  ea2b_1      CMPI.W      #%001,D5
00001C84  6600 000E               1044              BNE         ea2b_2
00001C88  12FC 0041               1045              MOVE.B      #$41,(A1)+          *write the ascii-hex value of 'A' into the buffer
00001C8C  0601 0030               1046              ADDI.B      #$30,D1
00001C90  12C1                    1047              MOVE.B      D1,(A1)+            *write the ascii-hex value of '0~7' into the buffer
00001C92  60C6                    1048              BRA         ea_exit
00001C94  0C45 0002               1049  ea2b_2      CMPI.W      #%010,D5
00001C98  6600 0012               1050              BNE         ea2b_3            
00001C9C  32FC 2841               1051              MOVE.W      #$2841,(A1)+        *write the ascii-hex value of '(' and 'A' into the buffer
00001CA0  0601 0030               1052              ADDI.B      #$30,D1
00001CA4  12C1                    1053              MOVE.B      D1,(A1)+            *write the ascii-hex value of '0~7' into the buffer            
00001CA6  12FC 0029               1054              MOVE.B      #$29,(A1)+          *write the ascii-hex value of ')' into the buffer
00001CAA  60AE                    1055              BRA         ea_exit
00001CAC  0C45 0003               1056  ea2b_3      CMPI.W      #%011,D5
00001CB0  6600 0016               1057              BNE         ea2b_4            
00001CB4  32FC 2841               1058              MOVE.W      #$2841,(A1)+        *write the ascii-hex value of '(' and 'A' into the buffer
00001CB8  0601 0030               1059              ADDI.B      #$30,D1
00001CBC  12C1                    1060              MOVE.B      D1,(A1)+            *write the ascii-hex value of '0~7' into the buffer            
00001CBE  12FC 0029               1061              MOVE.B      #$29,(A1)+          *write the ascii-hex value of ')' into the buffer
00001CC2  32FC 2B20               1062              MOVE.W      #$2B20,(A1)+        *write the ascii-hex value of '+' and ' ' into the buffer
00001CC6  6092                    1063              BRA         ea_exit
00001CC8  0C45 0004               1064  ea2b_4      CMPI.W      #%100,D5
00001CCC  6600 0018               1065              BNE         ea2b_5
00001CD0  32FC 202D               1066              MOVE.W      #$202D,(A1)+        *write the ascii-hex value of ' ' and '-' into the buffer
00001CD4  32FC 2841               1067              MOVE.W      #$2841,(A1)+        *write the ascii-hex value of '(' and 'A' into the buffer
00001CD8  0601 0030               1068              ADDI.B      #$30,D1
00001CDC  12C1                    1069              MOVE.B      D1,(A1)+            *write the ascii-hex value of '0~7' into the buffer            
00001CDE  12FC 0029               1070              MOVE.B      #$29,(A1)+          *write the ascii-hex value of ')' into the buffer
00001CE2  6000 FF76               1071              BRA         ea_exit
00001CE6  0C45 0005               1072  ea2b_5      CMPI.W      #%101,D5
00001CEA  6600 0066               1073              BNE         ea2b_6
00001CEE  32FC 2028               1074              MOVE.W      #$2028,(A1)+        *write the ascii-hex value of ' ' and '(' into the buffer
00001CF2                          1075  
00001CF2  3E18                    1076              MOVE.W      (A0)+,D7
00001CF4                          1077              
00001CF4  3C07                    1078              MOVE.W      D7,D6
00001CF6  0246 8000               1079              ANDI.W      #$8000,D6
00001CFA  0C46 0000               1080              CMPI.W      #0,D6
00001CFE  6700 000A               1081              BEQ         no_signbit1
00001D02  32FC 2D24               1082              MOVE.W      #$2D24,(A1)+          *write the ascii-hex value of '-$' into the buffer
00001D06  6000 0006               1083              BRA         numberbit1
00001D0A  32FC 2B24               1084  no_signbit1 MOVE.W      #$2B24,(A1)+          *write the ascii-hex value of '+$' into the buffer
00001D0E  3C07                    1085  numberbit1  MOVE.W      D7,D6
00001D10  0246 7FFF               1086              ANDI.W      #$7FFF,D6
00001D14                          1087m             add2ascii
00001D3A  32FC 2C20               1088              MOVE.W      #$2C20,(A1)+        *write ',' and ' ' (space) of ascii-hex into the buffer            
00001D3E                          1089  
00001D3E  12FC 0041               1090              MOVE.B      #$41,(A1)+          *write the ascii-hex value of 'A' into the buffer
00001D42  1203                    1091              MOVE.B      D3,D1               *Restore the back-up to D1
00001D44  0601 0030               1092              ADDI.B      #$30,D1
00001D48  12C1                    1093              MOVE.B      D1,(A1)+            *write the ascii-hex value of '0~7' into the buffer            
00001D4A  32FC 2920               1094              MOVE.W      #$2920,(A1)+        *write the ascii-hex value of ')' and ' ' into the buffer
00001D4E  6000 FF0A               1095              BRA         ea_exit
00001D52                          1096  
00001D52  0C45 0006               1097  ea2b_6      CMPI.W      #%110,D5
00001D56  6600 008C               1098              BNE         ea2b_7
00001D5A                          1099  
00001D5A  32FC 2028               1100              MOVE.W      #$2028,(A1)+        *write the ascii-hex value of ' ' and '(' into the buffer
00001D5E                          1101  
00001D5E  3E18                    1102              MOVE.W      (A0)+,D7
00001D60  3C07                    1103              MOVE.W      D7,D6
00001D62  0246 0080               1104              ANDI.W      #$0080,D6
00001D66  0C46 0000               1105              CMPI.W      #0,D6
00001D6A  6700 000A               1106              BEQ         no_signbit2
00001D6E  32FC 2D24               1107              MOVE.W      #$2D24,(A1)+          *write the ascii-hex value of '-$' into the buffer
00001D72  6000 0006               1108              BRA         numberbit2
00001D76  32FC 2B24               1109  no_signbit2 MOVE.W      #$2B24,(A1)+          *write the ascii-hex value of '+$' into the buffer
00001D7A  3C07                    1110  numberbit2  MOVE.W      D7,D6
00001D7C  0246 007F               1111              ANDI.W      #$007F,D6
00001D80                          1112m             add2ascii
00001DA6  32FC 2C20               1113              MOVE.W      #$2C20,(A1)+        *write ',' and ' ' (space) of ascii-hex into the buffer            
00001DAA                          1114  
00001DAA  12FC 0041               1115              MOVE.B      #$41,(A1)+          *write the ascii-hex value of 'A' into the buffer
00001DAE  1203                    1116              MOVE.B      D3,D1               *Restore the back-up to D1
00001DB0  0601 0030               1117              ADDI.B      #$30,D1
00001DB4  12C1                    1118              MOVE.B      D1,(A1)+            *write the ascii-hex value of '0~7' into the buffer
00001DB6  32FC 2C20               1119              MOVE.W      #$2C20,(A1)+        *write ',' and ' ' (space) of ascii-hex into the buffer
00001DBA                          1120              
00001DBA  3C07                    1121              MOVE.W      D7,D6
00001DBC  0246 8000               1122              ANDI.W      #$8000,D6
00001DC0  0C46 0000               1123              CMPI.W      #0,D6
00001DC4  6700 000A               1124              BEQ         d_chosen1
00001DC8  12FC 0041               1125              MOVE.B      #$41,(A1)+          *write the ascii-hex value of 'A' into the buffer
00001DCC  6000 0006               1126              BRA         x_number1
00001DD0  12FC 0044               1127  d_chosen1   MOVE.B      #$44,(A1)+          *write the ascii-hex value of 'D' into the buffer
00001DD4  1203                    1128  x_number1   MOVE.B      D3,D1               *Restore the back-up to D1
00001DD6  0601 0030               1129              ADDI.B      #$30,D1
00001DDA  12C1                    1130              MOVE.B      D1,(A1)+            *write the ascii-hex value of '0~7' into the buffer
00001DDC                          1131          
00001DDC  32FC 2920               1132              MOVE.W      #$2920,(A1)+        *write the ascii-hex value of ')' and ' ' into the buffer
00001DE0  6000 FE78               1133              BRA         ea_exit
00001DE4                          1134  
00001DE4                          1135  
00001DE4                          1136              * mode = #%111 & reg = #$000
00001DE4  0C01 0000               1137  ea2b_7      CMPI.B      #%000,D1
00001DE8  6600 0032               1138              BNE         ea2b_7_1
00001DEC  32FC 2024               1139              MOVE.W      #$2024,(A1)+        *write ' ' and '$' of ascii-hex into the buffer
00001DF0  3C18                    1140              MOVE.W      (A0)+,D6
00001DF2                          1141m             add2ascii
00001E18  6000 FE40               1142              BRA         ea_exit
00001E1C                          1143              
00001E1C  0C01 0001               1144  ea2b_7_1    CMPI.B      #%001,D1
00001E20  6600 0060               1145              BNE         ea2b_7_2
00001E24  32FC 2024               1146              MOVE.W      #$2024,(A1)+        *write ' ' and '$' of ascii-hex into the buffer
00001E28  2818                    1147              MOVE.L      (A0)+,D4
00001E2A  2C04                    1148              MOVE.L      D4,D6
00001E2C  E08E                    1149              LSR.L       #8,D6
00001E2E  E08E                    1150              LSR.L       #8,D6
00001E30                          1151m             add2ascii
00001E56  3C04                    1152              MOVE.W      D4,D6
00001E58                          1153m             add2ascii
00001E7E  6000 FDDA               1154              BRA         ea_exit
00001E82                          1155              
00001E82  0C01 0004               1156  ea2b_7_2    CMPI.B      #%100,D1
00001E86  6600 0078               1157              BNE         ea2b_7_3
00001E8A                          1158  
00001E8A  32FC 2324               1159              MOVE.W      #$2324,(A1)+        *write '#$' of ascii-hex into the buffer
00001E8E                          1160  
00001E8E                          1161              *check if the size for immediate value is Long or Word
00001E8E  47F9 000031D0           1162              LEA         imme_flag,A3
00001E94  3213                    1163              MOVE.W      (A3),D1
00001E96  0C41 0000               1164              CMPI.W      #0,D1
00001E9A  6700 0034               1165              BEQ         not_long
00001E9E  2218                    1166              MOVE.L      (A0)+,D1            *read the immediate value from the memory
00001EA0                          1167m             l_2ascii
00001EC8  36BC 0000               1168              MOVE.W      #0,(A3)             *reset the imme_flag            
00001ECC  6000 FD8C               1169              BRA         ea_exit
00001ED0  3218                    1170  not_long    MOVE.W      (A0)+,D1            *read the immediate value from the memory
00001ED2                          1171m             w_2ascii
00001EF8  36BC 0000               1172              MOVE.W      #0,(A3)             *reset the imme_flag
00001EFC  6000 FD5C               1173              BRA         ea_exit
00001F00                          1174              
00001F00  0C01 0002               1175  ea2b_7_3    CMPI.B      #%010,D1
00001F04  6600 005E               1176              BNE         ea2b_7_4
00001F08  32FC 2028               1177              MOVE.W      #$2028,(A1)+        *write the ascii-hex value of ' ' and '(' into the buffer
00001F0C                          1178  
00001F0C  3E18                    1179              MOVE.W      (A0)+,D7
00001F0E                          1180              
00001F0E  3C07                    1181              MOVE.W      D7,D6
00001F10  0246 8000               1182              ANDI.W      #$8000,D6
00001F14  0C46 0000               1183              CMPI.W      #0,D6
00001F18  6700 000A               1184              BEQ         no_signbit3
00001F1C  32FC 2D24               1185              MOVE.W      #$2D24,(A1)+         *write the ascii-hex value of '-$' into the buffer
00001F20  6000 0006               1186              BRA         numberbit3
00001F24  32FC 2B24               1187  no_signbit3 MOVE.W      #$2B24,(A1)+         *write the ascii-hex value of '+$' into the buffer
00001F28  3C07                    1188  numberbit3  MOVE.W      D7,D6
00001F2A  0246 7FFF               1189              ANDI.W      #$7FFF,D6
00001F2E                          1190m             add2ascii
00001F54  32FC 2C20               1191              MOVE.W      #$2C20,(A1)+         *write ',' and ' ' (space) of ascii-hex into the buffer            
00001F58                          1192  
00001F58  32FC 5043               1193              MOVE.W      #$5043,(A1)+         *write the ascii-hex value of 'PC' into the buffer
00001F5C                          1194              
00001F5C  32FC 2920               1195              MOVE.W      #$2920,(A1)+         *write the ascii-hex value of ')' and ' ' into the buffer
00001F60  6000 FCF8               1196              BRA         ea_exit
00001F64                          1197  
00001F64                          1198              * mode = #%111 & reg = #$011
00001F64  32FC 2028               1199  ea2b_7_4    MOVE.W      #$2028,(A1)+         *write the ascii-hex value of ' ' and '(' into the buffer
00001F68                          1200  
00001F68  3E18                    1201              MOVE.W      (A0)+,D7
00001F6A  3C07                    1202              MOVE.W      D7,D6
00001F6C  0246 0080               1203              ANDI.W      #$0080,D6
00001F70  0C46 0000               1204              CMPI.W      #0,D6
00001F74  6700 000A               1205              BEQ         no_signbit4
00001F78  32FC 2D24               1206              MOVE.W      #$2D24,(A1)+          *write the ascii-hex value of '-$' into the buffer
00001F7C  6000 0006               1207              BRA         numberbit4
00001F80  32FC 2B24               1208  no_signbit4 MOVE.W      #$2B24,(A1)+          *write the ascii-hex value of '+$' into the buffer
00001F84  3C07                    1209  numberbit4  MOVE.W      D7,D6
00001F86  0246 007F               1210              ANDI.W      #$007F,D6
00001F8A                          1211m             add2ascii
00001FB0  32FC 2C20               1212              MOVE.W      #$2C20,(A1)+        *write ',' and ' ' (space) of ascii-hex into the buffer            
00001FB4                          1213  
00001FB4  32FC 5043               1214              MOVE.W      #$5043,(A1)+        *write the ascii-hex value of 'PC' into the buffer
00001FB8  32FC 2C20               1215              MOVE.W      #$2C20,(A1)+        *write ',' and ' ' (space) of ascii-hex into the buffer
00001FBC                          1216              
00001FBC  3C07                    1217              MOVE.W      D7,D6
00001FBE  0246 8000               1218              ANDI.W      #$8000,D6
00001FC2  0C46 0000               1219              CMPI.W      #0,D6
00001FC6  6700 000A               1220              BEQ         d_chosen2
00001FCA  12FC 0041               1221              MOVE.B      #$41,(A1)+          *write the ascii-hex value of 'A' into the buffer
00001FCE  6000 0006               1222              BRA         x_number2
00001FD2  12FC 0044               1223  d_chosen2   MOVE.B      #$44,(A1)+          *write the ascii-hex value of 'D' into the buffer
00001FD6  1203                    1224  x_number2   MOVE.B      D3,D1               *Restore the back-up to D1
00001FD8  0601 0030               1225              ADDI.B      #$30,D1
00001FDC  12C1                    1226              MOVE.B      D1,(A1)+            *write the ascii-hex value of '0~7' into the buffer
00001FDE                          1227          
00001FDE  32FC 2920               1228              MOVE.W      #$2920,(A1)+         *write the ascii-hex value of ')' and ' ' into the buffer
00001FE2  6000 FC76               1229              BRA         ea_exit
00001FE6                          1230  
00001FE6                          1231  
00001FE6                          1232  
00001FE6                          1233  ***************************************************************************************************
00001FE6                          1234  
00001FE6                          1235  
00001FE6                          1236  
00001FE6                          1237  
00001FE6                          1238  
00001FE6                          1239  * Look-up Table
00001FE6                          1240  
00001FE6= 4E71 4E4F 5020 2...     1241  case_1  DC.W        $4E71,'NOP     ',$0000,$0000,$0000
00001FF6= 4E75 5254 5320 2...     1242          DC.W        $4E75,'RTS     ',$0000,$0000,$0008
00002006= 4840 5357 4150 2...     1243  case_2  DC.W        $4840,'SWAP    ',$0000,$0000,$0010
00002016= 0600 4144 4449 2...     1244  case_3  DC.W        $0600,'ADDI.B  ',$0001,$0000,$0018
00002026= 0640 4144 4449 2...     1245          DC.W        $0640,'ADDI.W  ',$0002,$0000,$0020
00002036= 0680 4144 4449 2...     1246          DC.W        $0680,'ADDI.L  ',$0003,$0000,$0028
00002046= 0200 414E 4449 2...     1247          DC.W        $0200,'ANDI.B  ',$0001,$0000,$0030
00002056= 0240 414E 4449 2...     1248          DC.W        $0240,'ANDI.W  ',$0002,$0000,$0038
00002066= 0280 414E 4449 2...     1249          DC.W        $0280,'ANDI.L  ',$0003,$0000,$0040
00002076= E0C0 4153 5220 2...     1250          DC.W        $E0C0,'ASR     ',$0000,$0000,$0048
00002086= E1C0 4153 4C20 2...     1251          DC.W        $E1C0,'ASL     ',$0000,$0000,$0050
00002096= 4200 434C 522E 4...     1252          DC.W        $4200,'CLR.B   ',$0000,$0000,$0058
000020A6= 4240 434C 522E 5...     1253          DC.W        $4240,'CLR.W   ',$0000,$0000,$0060
000020B6= 4280 434C 522E 4...     1254          DC.W        $4280,'CLR.L   ',$0000,$0000,$0068
000020C6= 0C00 434D 5049 2...     1255          DC.W        $0C00,'CMPI.B  ',$0001,$0000,$0070
000020D6= 0C40 434D 5049 2...     1256          DC.W        $0C40,'CMPI.W  ',$0002,$0000,$0078
000020E6= 0C80 434D 5049 2...     1257          DC.W        $0C80,'CMPI.L  ',$0003,$0000,$0080
000020F6= 0A00 454F 5249 2...     1258          DC.W        $0A00,'EORI.B  ',$0001,$0000,$0088
00002106= 0A40 454F 5249 2...     1259          DC.W        $0A40,'EORI.W  ',$0002,$0000,$0090
00002116= 0A80 454F 5249 2...     1260          DC.W        $0A80,'EORI.L  ',$0003,$0000,$0098
00002126= 4EC0 4A4D 5020 2...     1261          DC.W        $4EC0,'JMP     ',$0000,$0000,$00A0
00002136= 4E80 4A53 5220 2...     1262          DC.W        $4E80,'JSR     ',$0000,$0000,$00A8
00002146= E2C0 4C53 5220 2...     1263          DC.W        $E2C0,'LSR     ',$0000,$0000,$00B0
00002156= E3C0 4C53 4C20 2...     1264          DC.W        $E3C0,'LSL     ',$0000,$0000,$00B8
00002166= 4400 4E45 472E 4...     1265          DC.W        $4400,'NEG.B   ',$0000,$0000,$00C0
00002176= 4440 4E45 472E 5...     1266          DC.W        $4440,'NEG.W   ',$0000,$0000,$00C8
00002186= 4480 4E45 472E 4...     1267          DC.W        $4480,'NEG.L   ',$0000,$0000,$00D0
00002196= 4600 4E4F 542E 4...     1268          DC.W        $4600,'NOT.B   ',$0000,$0000,$00D8
000021A6= 4640 4E4F 542E 5...     1269          DC.W        $4640,'NOT.W   ',$0000,$0000,$00E0
000021B6= 4680 4E4F 542E 4...     1270          DC.W        $4680,'NOT.L   ',$0000,$0000,$00E8
000021C6                          1271  *       DC.W        $0000,'ORI.B   ',$0001,$0000,$00F0
000021C6                          1272  *       DC.W        $0040,'ORI.W   ',$0002,$0000,$00F8
000021C6                          1273  *       DC.W        $0080,'ORI.L   ',$0003,$0000,$0100
000021C6= E6C0 524F 5220 2...     1274          DC.W        $E6C0,'ROR     ',$0000,$0000,$0108
000021D6= E7C0 524F 4C20 2...     1275          DC.W        $E7C0,'ROL     ',$0000,$0000,$0110
000021E6= 0400 5355 4249 2...     1276          DC.W        $0400,'SUBI.B  ',$0001,$0000,$0118
000021F6= 0440 5355 4249 2...     1277          DC.W        $0440,'SUBI.W  ',$0002,$0000,$0120
00002206= 0480 5355 4249 2...     1278          DC.W        $0480,'SUBI.L  ',$0003,$0000,$0128
00002216= 4880 4D4F 5645 4...     1279          DC.W        $4880,'MOVEM.W ',$0004,$0000,$0130
00002226= 4C80 4D4F 5645 4...     1280          DC.W        $4C80,'MOVEM.W ',$0005,$0000,$0138
00002236= 48C0 4D4F 5645 4...     1281          DC.W        $48C0,'MOVEM.L ',$0004,$0000,$0140
00002246= 4CC0 4D4F 5645 4...     1282          DC.W        $4CC0,'MOVEM.L ',$0005,$0000,$0148
00002256= D000 4144 442E 4...     1283  case_4  DC.W        $D000,'ADD.B   ',$0000,$0000,$0150
00002266= D100 4144 442E 4...     1284          DC.W        $D100,'ADD.B   ',$0001,$0000,$0158
00002276= D040 4144 442E 5...     1285          DC.W        $D040,'ADD.W   ',$0000,$0000,$0160
00002286= D140 4144 442E 5...     1286          DC.W        $D140,'ADD.W   ',$0001,$0000,$0168
00002296= D080 4144 442E 4...     1287          DC.W        $D080,'ADD.L   ',$0000,$0001,$0170
000022A6= D180 4144 442E 4...     1288          DC.W        $D180,'ADD.L   ',$0001,$0000,$0178
000022B6= D0C0 4144 4441 2...     1289          DC.W        $D0C0,'ADDA.W  ',$0002,$0000,$0180
000022C6= D1C0 4144 4441 2...     1290          DC.W        $D1C0,'ADDA.L  ',$0002,$0001,$0188
000022D6= C000 414E 442E 4...     1291          DC.W        $C000,'AND.B   ',$0000,$0000,$0190
000022E6= C100 414E 442E 4...     1292          DC.W        $C100,'AND.B   ',$0001,$0000,$0198
000022F6= C040 414E 442E 5...     1293          DC.W        $C040,'AND.W   ',$0000,$0000,$01A0
00002306= C140 414E 442E 5...     1294          DC.W        $C140,'AND.W   ',$0001,$0000,$01A8
00002316= C080 414E 442E 4...     1295          DC.W        $C080,'AND.L   ',$0000,$0001,$01B0
00002326= C180 414E 442E 4...     1296          DC.W        $C180,'AND.L   ',$0001,$0000,$01B8
00002336= B000 434D 502E 4...     1297          DC.W        $B000,'CMP.B   ',$0000,$0000,$01C0
00002346= B040 434D 502E 5...     1298          DC.W        $B040,'CMP.W   ',$0000,$0000,$01C8
00002356= B080 434D 502E 4...     1299          DC.W        $B080,'CMP.L   ',$0000,$0001,$01D0
00002366= B0C0 434D 5041 2...     1300          DC.W        $B0C0,'CMPA.W  ',$0002,$0000,$01D8
00002376= B1C0 434D 5041 2...     1301          DC.W        $B1C0,'CMPA.L  ',$0002,$0001,$01E0
00002386= B100 454F 522E 4...     1302          DC.W        $B100,'EOR.B   ',$0001,$0000,$01E8
00002396= B140 454F 522E 5...     1303          DC.W        $B140,'EOR.W   ',$0001,$0000,$01F0
000023A6= B180 454F 522E 4...     1304          DC.W        $B180,'EOR.L   ',$0001,$0000,$01F8
000023B6= 41C0 4C45 4120 2...     1305          DC.W        $41C0,'LEA     ',$0002,$0000,$0200
000023C6= 3040 4D4F 5645 4...     1306          DC.W        $3040,'MOVEA.W ',$0002,$0000,$0208
000023D6= 2040 4D4F 5645 4...     1307          DC.W        $2040,'MOVEA.L ',$0002,$0001,$0210
000023E6= 8000 4F52 2E42 2...     1308          DC.W        $8000,'OR.B    ',$0000,$0000,$0218
000023F6= 8100 4F52 2E42 2...     1309          DC.W        $8100,'OR.B    ',$0001,$0000,$0220
00002406= 8040 4F52 2E57 2...     1310          DC.W        $8040,'OR.W    ',$0000,$0000,$0228
00002416= 8140 4F52 2E57 2...     1311          DC.W        $8140,'OR.W    ',$0001,$0000,$0230
00002426= 8080 4F52 2E4C 2...     1312          DC.W        $8080,'OR.L    ',$0000,$0001,$0238
00002436= 8180 4F52 2E4C 2...     1313          DC.W        $8180,'OR.L    ',$0001,$0000,$0240
00002446= 9000 5355 422E 4...     1314          DC.W        $9000,'SUB.B   ',$0000,$0000,$0248
00002456= 9100 5355 422E 4...     1315          DC.W        $9100,'SUB.B   ',$0001,$0000,$0250
00002466= 9040 5355 422E 5...     1316          DC.W        $9040,'SUB.W   ',$0000,$0000,$0258
00002476= 9140 5355 422E 5...     1317          DC.W        $9140,'SUB.W   ',$0001,$0000,$0260
00002486= 9080 5355 422E 4...     1318          DC.W        $9080,'SUB.L   ',$0000,$0001,$0268
00002496= 9180 5355 422E 4...     1319          DC.W        $9180,'SUB.L   ',$0001,$0000,$0270
000024A6= 90C0 5355 4241 2...     1320          DC.W        $90C0,'SUBA.W  ',$0002,$0000,$0278
000024B6= 91C0 5355 4241 2...     1321          DC.W        $91C0,'SUBA.L  ',$0002,$0001,$0280
000024C6= 6100 4253 5220 2...     1322  case_5  DC.W        $6100,'BSR     ',$0000,$0000,$0288
000024D6= C140 4558 4720 2...     1323  case_6  DC.W        $C140,'EXG     ',$0002,$0000,$0290
000024E6= C148 4558 4720 2...     1324          DC.W        $C148,'EXG     ',$0003,$0000,$0298
000024F6= C188 4558 4720 2...     1325          DC.W        $C188,'EXG     ',$0004,$0000,$02A0
00002506= E008 4C53 522E 4...     1326          DC.W        $E008,'LSR.B   ',$0000,$0000,$02A8
00002516= E028 4C53 522E 4...     1327          DC.W        $E028,'LSR.B   ',$0001,$0000,$02B0
00002526= E048 4C53 522E 5...     1328          DC.W        $E048,'LSR.W   ',$0000,$0000,$02B8
00002536= E068 4C53 522E 5...     1329          DC.W        $E068,'LSR.W   ',$0001,$0000,$02C0
00002546= E088 4C53 522E 4...     1330          DC.W        $E088,'LSR.L   ',$0000,$0000,$02C8
00002556= E0A8 4C53 522E 4...     1331          DC.W        $E0A8,'LSR.L   ',$0001,$0000,$02D0
00002566= E108 4C53 4C2E 4...     1332          DC.W        $E108,'LSL.B   ',$0000,$0000,$02D8
00002576= E128 4C53 4C2E 4...     1333          DC.W        $E128,'LSL.B   ',$0001,$0000,$02E0
00002586= E148 4C53 4C2E 5...     1334          DC.W        $E148,'LSL.W   ',$0000,$0000,$02E8
00002596= E168 4C53 4C2E 5...     1335          DC.W        $E168,'LSL.W   ',$0001,$0000,$02F0
000025A6= E188 4C53 4C2E 4...     1336          DC.W        $E188,'LSL.L   ',$0000,$0000,$02F8
000025B6= E1A8 4C53 4C2E 4...     1337          DC.W        $E1A8,'LSL.L   ',$0001,$0000,$0300
000025C6= E018 524F 522E 4...     1338          DC.W        $E018,'ROR.B   ',$0000,$0000,$0308
000025D6= E038 524F 522E 4...     1339          DC.W        $E038,'ROR.B   ',$0001,$0000,$0310
000025E6= E058 524F 522E 5...     1340          DC.W        $E058,'ROR.W   ',$0000,$0000,$0318
000025F6= E078 524F 522E 5...     1341          DC.W        $E078,'ROR.W   ',$0001,$0000,$0320
00002606= E098 524F 522E 4...     1342          DC.W        $E098,'ROR.L   ',$0000,$0000,$0328
00002616= E0B8 524F 522E 4...     1343          DC.W        $E0B8,'ROR.L   ',$0001,$0000,$0330
00002626= E118 524F 4C2E 4...     1344          DC.W        $E118,'ROL.B   ',$0000,$0000,$0338
00002636= E138 524F 4C2E 4...     1345          DC.W        $E138,'ROL.B   ',$0001,$0000,$0340
00002646= E158 524F 4C2E 5...     1346          DC.W        $E158,'ROL.W   ',$0000,$0000,$0348
00002656= E178 524F 4C2E 5...     1347          DC.W        $E178,'ROL.W   ',$0001,$0000,$0350
00002666= E198 524F 4C2E 4...     1348          DC.W        $E198,'ROL.L   ',$0000,$0000,$0358
00002676= E1B8 524F 4C2E 4...     1349          DC.W        $E1B8,'ROL.L   ',$0001,$0000,$0360
00002686= E000 4153 522E 4...     1350          DC.W        $E000,'ASR.B   ',$0000,$0000,$0368
00002696= E020 4153 522E 4...     1351          DC.W        $E020,'ASR.B   ',$0001,$0000,$0370
000026A6= E040 4153 522E 5...     1352          DC.W        $E040,'ASR.W   ',$0000,$0000,$0378
000026B6= E060 4153 522E 5...     1353          DC.W        $E060,'ASR.W   ',$0001,$0000,$0380
000026C6= E080 4153 522E 4...     1354          DC.W        $E080,'ASR.L   ',$0000,$0000,$0388
000026D6= E0A0 4153 522E 4...     1355          DC.W        $E0A0,'ASR.L   ',$0001,$0000,$0390
000026E6= E100 4153 4C2E 4...     1356          DC.W        $E100,'ASL.B   ',$0000,$0000,$0398
000026F6= E120 4153 4C2E 4...     1357          DC.W        $E120,'ASL.B   ',$0001,$0000,$03A0
00002706= E140 4153 4C2E 5...     1358          DC.W        $E140,'ASL.W   ',$0000,$0000,$03A8
00002716= E160 4153 4C2E 5...     1359          DC.W        $E160,'ASL.W   ',$0001,$0000,$03B0
00002726= E180 4153 4C2E 4...     1360          DC.W        $E180,'ASL.L   ',$0000,$0000,$03B8
00002736= E1A0 4153 4C2E 4...     1361          DC.W        $E1A0,'ASL.L   ',$0001,$0000,$03C0
00002746= 1000 4D4F 5645 2...     1362  case_7  DC.W        $1000,'MOVE.B  ',$0000,$0000,$03C8
00002756= 3000 4D4F 5645 2...     1363          DC.W        $3000,'MOVE.W  ',$0001,$0000,$03D0
00002766= 2000 4D4F 5645 2...     1364          DC.W        $2000,'MOVE.L  ',$0002,$0001,$03D8
00002776                          1365  
00002776= 00                      1366  null     DC.B    0                                 *Null terminator
00002777                          1367  
00002777                          1368  
00002777                          1369  
00002777                          1370  
00002777                          1371  
00002777                          1372  * EA Table
00002777                          1373  
00002778= 0F0F 0F0F 0F0F 0F0F     1374  ea_table        DC.W        $0F0F,$0F0F,$0F0F,$0F0F
00002780= 0F0F 0F0F 0F0F 0F0F     1375              DC.W        $0F0F,$0F0F,$0F0F,$0F0F
00002788= 0F0F 0F0F 0F0F 0F0F     1376              DC.W        $0F0F,$0F0F,$0F0F,$0F0F
00002790= 010B 090A 0F0F 0F0F     1377              DC.W        $010B,$090A,$0F0F,$0F0F
00002798= 010B 090A 0F0F 0F0F     1378              DC.W        $010B,$090A,$0F0F,$0F0F
000027A0= 010B 090A 0F0F 0F0F     1379              DC.W        $010B,$090A,$0F0F,$0F0F
000027A8= 010B 090A 0F0F 0F0F     1380              DC.W        $010B,$090A,$0F0F,$0F0F
000027B0= 010B 090A 0F0F 0F0F     1381              DC.W        $010B,$090A,$0F0F,$0F0F
000027B8= 010B 090A 0F0F 0F0F     1382              DC.W        $010B,$090A,$0F0F,$0F0F
000027C0= 0001 0B09 0A0F 0F0F     1383              DC.W        $0001,$0B09,$0A0F,$0F0F
000027C8= 0001 0B09 0A0F 0F0F     1384              DC.W        $0001,$0B09,$0A0F,$0F0F
000027D0= 010B 090A 0F0F 0F0F     1385              DC.W        $010B,$090A,$0F0F,$0F0F
000027D8= 010B 090A 0F0F 0F0F     1386              DC.W        $010B,$090A,$0F0F,$0F0F
000027E0= 010B 090A 0F0F 0F0F     1387              DC.W        $010B,$090A,$0F0F,$0F0F
000027E8= 010B 0F0F 0F0F 0F0F     1388              DC.W        $010B,$0F0F,$0F0F,$0F0F
000027F0= 010B 0F0F 0F0F 0F0F     1389              DC.W        $010B,$0F0F,$0F0F,$0F0F
000027F8= 010B 0F0F 0F0F 0F0F     1390              DC.W        $010B,$0F0F,$0F0F,$0F0F
00002800= 010B 090A 0F0F 0F0F     1391              DC.W        $010B,$090A,$0F0F,$0F0F
00002808= 010B 090A 0F0F 0F0F     1392              DC.W        $010B,$090A,$0F0F,$0F0F
00002810= 010B 090A 0F0F 0F0F     1393              DC.W        $010B,$090A,$0F0F,$0F0F
00002818= 0001 0304 0B0F 0F0F     1394              DC.W        $0001,$0304,$0B0F,$0F0F
00002820= 0001 0304 0B0F 0F0F     1395              DC.W        $0001,$0304,$0B0F,$0F0F
00002828= 0001 0B09 0A0F 0F0F     1396              DC.W        $0001,$0B09,$0A0F,$0F0F
00002830= 0001 0B09 0A0F 0F0F     1397              DC.W        $0001,$0B09,$0A0F,$0F0F
00002838= 010B 090A 0F0F 0F0F     1398              DC.W        $010B,$090A,$0F0F,$0F0F
00002840= 010B 090A 0F0F 0F0F     1399              DC.W        $010B,$090A,$0F0F,$0F0F
00002848= 010B 090A 0F0F 0F0F     1400              DC.W        $010B,$090A,$0F0F,$0F0F
00002850= 010B 090A 0F0F 0F0F     1401              DC.W        $010B,$090A,$0F0F,$0F0F
00002858= 010B 090A 0F0F 0F0F     1402              DC.W        $010B,$090A,$0F0F,$0F0F
00002860= 010B 090A 0F0F 0F0F     1403              DC.W        $010B,$090A,$0F0F,$0F0F
00002868= 010B 090A 0F0F 0F0F     1404              DC.W        $010B,$090A,$0F0F,$0F0F
00002870= 010B 090A 0F0F 0F0F     1405              DC.W        $010B,$090A,$0F0F,$0F0F
00002878= 010B 090A 0F0F 0F0F     1406              DC.W        $010B,$090A,$0F0F,$0F0F
00002880= 0001 0B09 0A0F 0F0F     1407              DC.W        $0001,$0B09,$0A0F,$0F0F
00002888= 0001 0B09 0A0F 0F0F     1408              DC.W        $0001,$0B09,$0A0F,$0F0F
00002890= 010B 090A 0F0F 0F0F     1409              DC.W        $010B,$090A,$0F0F,$0F0F
00002898= 010B 090A 0F0F 0F0F     1410              DC.W        $010B,$090A,$0F0F,$0F0F
000028A0= 010B 090A 0F0F 0F0F     1411              DC.W        $010B,$090A,$0F0F,$0F0F
000028A8= 0001 030B 090A 0F0F     1412              DC.W        $0001,$030B,$090A,$0F0F
000028B0= 0001 040B 0F0F 0F0F     1413              DC.W        $0001,$040B,$0F0F,$0F0F
000028B8= 0001 030B 090A 0F0F     1414              DC.W        $0001,$030B,$090A,$0F0F
000028C0= 0001 040B 0F0F 0F0F     1415              DC.W        $0001,$040B,$0F0F,$0F0F
000028C8= 0F0F 0F0F 0F0F 0F0F     1416              DC.W        $0F0F,$0F0F,$0F0F,$0F0F
000028D0= 0001 0B09 0A0F 0F0F     1417              DC.W        $0001,$0B09,$0A0F,$0F0F
000028D8= 0F0F 0F0F 0F0F 0F0F     1418              DC.W        $0F0F,$0F0F,$0F0F,$0F0F
000028E0= 0001 0B09 0A0F 0F0F     1419              DC.W        $0001,$0B09,$0A0F,$0F0F
000028E8= 0F0F 0F0F 0F0F 0F0F     1420              DC.W        $0F0F,$0F0F,$0F0F,$0F0F
000028F0= 0001 0B09 0A0F 0F0F     1421              DC.W        $0001,$0B09,$0A0F,$0F0F
000028F8= 0F0F 0F0F 0F0F 0F0F     1422              DC.W        $0F0F,$0F0F,$0F0F,$0F0F
00002900= 0F0F 0F0F 0F0F 0F0F     1423              DC.W        $0F0F,$0F0F,$0F0F,$0F0F
00002908= 010F 0F0F 0F0F 0F0F     1424              DC.W        $010F,$0F0F,$0F0F,$0F0F
00002910= 0001 0B09 0A0F 0F0F     1425              DC.W        $0001,$0B09,$0A0F,$0F0F
00002918= 010F 0F0F 0F0F 0F0F     1426              DC.W        $010F,$0F0F,$0F0F,$0F0F
00002920= 0001 0B09 0A0F 0F0F     1427              DC.W        $0001,$0B09,$0A0F,$0F0F
00002928= 010F 0F0F 0F0F 0F0F     1428              DC.W        $010F,$0F0F,$0F0F,$0F0F
00002930= 0001 0B09 0A0F 0F0F     1429              DC.W        $0001,$0B09,$0A0F,$0F0F
00002938= 0F0F 0F0F 0F0F 0F0F     1430              DC.W        $0F0F,$0F0F,$0F0F,$0F0F
00002940= 0F0F 0F0F 0F0F 0F0F     1431              DC.W        $0F0F,$0F0F,$0F0F,$0F0F
00002948= 0F0F 0F0F 0F0F 0F0F     1432              DC.W        $0F0F,$0F0F,$0F0F,$0F0F
00002950= 0F0F 0F0F 0F0F 0F0F     1433              DC.W        $0F0F,$0F0F,$0F0F,$0F0F
00002958= 0F0F 0F0F 0F0F 0F0F     1434              DC.W        $0F0F,$0F0F,$0F0F,$0F0F
00002960= 010B 090A 0F0F 0F0F     1435              DC.W        $010B,$090A,$0F0F,$0F0F
00002968= 010B 090A 0F0F 0F0F     1436              DC.W        $010B,$090A,$0F0F,$0F0F
00002970= 010B 090A 0F0F 0F0F     1437              DC.W        $010B,$090A,$0F0F,$0F0F
00002978= 0001 0304 0B0F 0F0F     1438              DC.W        $0001,$0304,$0B0F,$0F0F
00002980= 0F0F 0F0F 0F0F 0F0F     1439              DC.W        $0F0F,$0F0F,$0F0F,$0F0F
00002988= 0F0F 0F0F 0F0F 0F0F     1440              DC.W        $0F0F,$0F0F,$0F0F,$0F0F
00002990= 010F 0F0F 0F0F 0F0F     1441              DC.W        $010F,$0F0F,$0F0F,$0F0F
00002998= 0001 0B09 0A0F 0F0F     1442              DC.W        $0001,$0B09,$0A0F,$0F0F
000029A0= 010F 0F0F 0F0F 0F0F     1443              DC.W        $010F,$0F0F,$0F0F,$0F0F
000029A8= 0001 0B09 0A0F 0F0F     1444              DC.W        $0001,$0B09,$0A0F,$0F0F
000029B0= 010F 0F0F 0F0F 0F0F     1445              DC.W        $010F,$0F0F,$0F0F,$0F0F
000029B8= 0001 0B09 0A0F 0F0F     1446              DC.W        $0001,$0B09,$0A0F,$0F0F
000029C0= 0F0F 0F0F 0F0F 0F0F     1447              DC.W        $0F0F,$0F0F,$0F0F,$0F0F
000029C8= 0001 0B09 0A0F 0F0F     1448              DC.W        $0001,$0B09,$0A0F,$0F0F
000029D0= 0F0F 0F0F 0F0F 0F0F     1449              DC.W        $0F0F,$0F0F,$0F0F,$0F0F
000029D8= 0001 0B09 0A0F 0F0F     1450              DC.W        $0001,$0B09,$0A0F,$0F0F
000029E0= 0F0F 0F0F 0F0F 0F0F     1451              DC.W        $0F0F,$0F0F,$0F0F,$0F0F
000029E8= 0001 0B09 0A0F 0F0F     1452              DC.W        $0001,$0B09,$0A0F,$0F0F
000029F0= 0F0F 0F0F 0F0F 0F0F     1453              DC.W        $0F0F,$0F0F,$0F0F,$0F0F
000029F8= 0F0F 0F0F 0F0F 0F0F     1454              DC.W        $0F0F,$0F0F,$0F0F,$0F0F
00002A00= 0F0F 0F0F 0F0F 0F0F     1455              DC.W        $0F0F,$0F0F,$0F0F,$0F0F
00002A08= 0F0F 0F0F 0F0F 0F0F     1456              DC.W        $0F0F,$0F0F,$0F0F,$0F0F
00002A10= 0F0F 0F0F 0F0F 0F0F     1457              DC.W        $0F0F,$0F0F,$0F0F,$0F0F
00002A18= 0F0F 0F0F 0F0F 0F0F     1458              DC.W        $0F0F,$0F0F,$0F0F,$0F0F
00002A20= 0F0F 0F0F 0F0F 0F0F     1459              DC.W        $0F0F,$0F0F,$0F0F,$0F0F
00002A28= 0F0F 0F0F 0F0F 0F0F     1460              DC.W        $0F0F,$0F0F,$0F0F,$0F0F
00002A30= 0F0F 0F0F 0F0F 0F0F     1461              DC.W        $0F0F,$0F0F,$0F0F,$0F0F
00002A38= 0F0F 0F0F 0F0F 0F0F     1462              DC.W        $0F0F,$0F0F,$0F0F,$0F0F
00002A40= 0F0F 0F0F 0F0F 0F0F     1463              DC.W        $0F0F,$0F0F,$0F0F,$0F0F
00002A48= 0F0F 0F0F 0F0F 0F0F     1464              DC.W        $0F0F,$0F0F,$0F0F,$0F0F
00002A50= 0F0F 0F0F 0F0F 0F0F     1465              DC.W        $0F0F,$0F0F,$0F0F,$0F0F
00002A58= 0F0F 0F0F 0F0F 0F0F     1466              DC.W        $0F0F,$0F0F,$0F0F,$0F0F
00002A60= 0F0F 0F0F 0F0F 0F0F     1467              DC.W        $0F0F,$0F0F,$0F0F,$0F0F
00002A68= 0F0F 0F0F 0F0F 0F0F     1468              DC.W        $0F0F,$0F0F,$0F0F,$0F0F
00002A70= 0F0F 0F0F 0F0F 0F0F     1469              DC.W        $0F0F,$0F0F,$0F0F,$0F0F
00002A78= 0F0F 0F0F 0F0F 0F0F     1470              DC.W        $0F0F,$0F0F,$0F0F,$0F0F
00002A80= 0F0F 0F0F 0F0F 0F0F     1471              DC.W        $0F0F,$0F0F,$0F0F,$0F0F
00002A88= 0F0F 0F0F 0F0F 0F0F     1472              DC.W        $0F0F,$0F0F,$0F0F,$0F0F
00002A90= 0F0F 0F0F 0F0F 0F0F     1473              DC.W        $0F0F,$0F0F,$0F0F,$0F0F
00002A98= 0F0F 0F0F 0F0F 0F0F     1474              DC.W        $0F0F,$0F0F,$0F0F,$0F0F
00002AA0= 0F0F 0F0F 0F0F 0F0F     1475              DC.W        $0F0F,$0F0F,$0F0F,$0F0F
00002AA8= 0F0F 0F0F 0F0F 0F0F     1476              DC.W        $0F0F,$0F0F,$0F0F,$0F0F
00002AB0= 0F0F 0F0F 0F0F 0F0F     1477              DC.W        $0F0F,$0F0F,$0F0F,$0F0F
00002AB8= 0F0F 0F0F 0F0F 0F0F     1478              DC.W        $0F0F,$0F0F,$0F0F,$0F0F
00002AC0= 0F0F 0F0F 0F0F 0F0F     1479              DC.W        $0F0F,$0F0F,$0F0F,$0F0F
00002AC8= 0F0F 0F0F 0F0F 0F0F     1480              DC.W        $0F0F,$0F0F,$0F0F,$0F0F
00002AD0= 0F0F 0F0F 0F0F 0F0F     1481              DC.W        $0F0F,$0F0F,$0F0F,$0F0F
00002AD8= 0F0F 0F0F 0F0F 0F0F     1482              DC.W        $0F0F,$0F0F,$0F0F,$0F0F
00002AE0= 0F0F 0F0F 0F0F 0F0F     1483              DC.W        $0F0F,$0F0F,$0F0F,$0F0F
00002AE8= 0F0F 0F0F 0F0F 0F0F     1484              DC.W        $0F0F,$0F0F,$0F0F,$0F0F
00002AF0= 0F0F 0F0F 0F0F 0F0F     1485              DC.W        $0F0F,$0F0F,$0F0F,$0F0F
00002AF8= 0F0F 0F0F 0F0F 0F0F     1486              DC.W        $0F0F,$0F0F,$0F0F,$0F0F
00002B00= 0F0F 0F0F 0F0F 0F0F     1487              DC.W        $0F0F,$0F0F,$0F0F,$0F0F
00002B08= 0F0F 0F0F 0F0F 0F0F     1488              DC.W        $0F0F,$0F0F,$0F0F,$0F0F
00002B10= 0F0F 0F0F 0F0F 0F0F     1489              DC.W        $0F0F,$0F0F,$0F0F,$0F0F
00002B18= 0F0F 0F0F 0F0F 0F0F     1490              DC.W        $0F0F,$0F0F,$0F0F,$0F0F
00002B20= 0F0F 0F0F 0F0F 0F0F     1491              DC.W        $0F0F,$0F0F,$0F0F,$0F0F
00002B28= 0F0F 0F0F 0F0F 0F0F     1492              DC.W        $0F0F,$0F0F,$0F0F,$0F0F
00002B30= 0F0F 0F0F 0F0F 0F0F     1493              DC.W        $0F0F,$0F0F,$0F0F,$0F0F
00002B38= 0F0F 0F0F 0F0F 0F0F     1494              DC.W        $0F0F,$0F0F,$0F0F,$0F0F
00002B40= 0F0F 0F0F 0F0F 0F0F     1495              DC.W        $0F0F,$0F0F,$0F0F,$0F0F
00002B48= 0F0F 0F0F 0F0F 0F0F     1496              DC.W        $0F0F,$0F0F,$0F0F,$0F0F
00002B50= 0F0F 0F0F 0F0F 0F0F     1497              DC.W        $0F0F,$0F0F,$0F0F,$0F0F
00002B58                          1498  
00002B58                          1499  
00002B58                          1500  
00002B58= 456E 7465 7220 7...     1501  string1     DC.W    'Enter the starting address in Hex: ',0
00002B7E= 456E 7465 7220 7...     1502  string2     DC.W    'Enter the ending address in Hex: ',0
00002BA2= 4C65 6E67 7468 2...     1503  string3     DC.W    'Length is too long. Maximum allowed number of characters are 8',0
00002BE2= 496E 7661 6C69 6...     1504  string4     DC.W    'Invalid character detected. Only hexadecimal characters are allowed.',0
00002C28= 4D65 6D6F 7279 2...     1505  string5     DC.W    'Memory is out of range. The correct memory range is 0 - FFFFFF (16MB) ',0
00002C70= 4164 6472 6573 7...     1506  string6     DC.W    'Address has been modified to enforce the even address boundary.',0
00002CB2= 496C 6C65 6761 6...     1507  string7     DC.W    'Illegal address. End address should be greater or equal to the start address.',0
00002D02= 5072 6573 7320 3...     1508  string8     DC.W    'Press <ENTER> to continue... ',0
00002D22= 5468 6520 6D65 6...     1509  string9     DC.W    'The memory range has been disassembled successfuly.',0
00002D58= 5072 6573 7320 3...     1510  string10    DC.W    'Press <ENTER> to start over. (Press <q> to quit): ',0
00002D8C= 0000                    1511  newline     DC.W    '',0
00002D8E                          1512  
00002D8E                          1513  reader      DS.L    100
00002F1E                          1514  reader2     DS.L    100
000030AE                          1515  
000030AE                          1516  start_addr  DS.L    10
000030D6                          1517  end_addr    DS.L    10
000030FE= 00000000                1518  which_add   DC.L    0
00003102                          1519  
00003102                          1520  
00003102                          1521  buffer      DS.W        100                  *Print buffer
000031CA                          1522  
000031CA= 0000                    1523  loop_num    DC.W        0
000031CC= 0000                    1524  bad_flag    DC.W        0
000031CE= 0000                    1525  jump_flag   DC.W        0
000031D0= 0000                    1526  imme_flag   DC.W        0
000031D2= 0000                    1527  move_flag   DC.W        0
000031D4= 0000                    1528  dis_table   DC.W        0
000031D6                          1529  
000031D6                          1530  
000031D6= 20 20 20 20 20 20 ...   1531  opening     DC.B   '            _________   _______     ___     _____  _____ ',CR,LF
00003211= 20 20 20 20 20 20 ...   1532              DC.B   '           |___   ___| |  _____|   /   \   |     \/     |',CR,LF
0000324C= 20 20 20 20 20 20 ...   1533              DC.B   '               | |     | |        / / \ \  | |\ \  / /| |',CR,LF
00003287= 20 20 20 20 20 20 ...   1534              DC.B   '               | |     | |_____  / /___\ \ | | \ \/ / | |',CR,LF
000032C2= 20 20 20 20 20 20 ...   1535              DC.B   '               | |     |  _____| |  ___  | | |  \__/  | |',CR,LF
000032FD= 20 20 20 20 20 20 ...   1536              DC.B   '               | |     | |       | |   | | | |        | |',CR,LF
00003338= 20 20 20 20 20 20 ...   1537              DC.B   '               | |     | |_____  | |   | | | |        | |',CR,LF
00003373= 20 20 20 20 20 20 ...   1538              DC.B   '               |_|     |_______| |_|   |_| |_|        |_|',CR,LF
000033AE= 20 5F 5F 5F 5F 5F ...   1539              DC.B   ' _______     ___    ________   _   ___      _   _______      ___     _  ',CR,LF
000033F8= 7C 20 20 5F 5F 5F ...   1540              DC.B   '|  ___  |   /   \  |_______ | | | |   \    | | |  ___  \    /   \   | | ',CR,LF
00003442= 7C 20 7C 20 20 20 ...   1541              DC.B   '| |   | |  / / \ \       / /  | | | |\ \   | | | |   |_|   / / \ \  | | ',CR,LF
0000348C= 7C 20 7C 5F 5F 5F ...   1542              DC.B   '| |___/ / / /___\ \     / /   | | | | \ \  | | | |  ___   / /___\ \ | | ',CR,LF
000034D6= 7C 20 20 5F 5F 5F ...   1543              DC.B   '|  ___ <  |  ___  |    / /    | | | |  \ \ | | | | |__ |  |  ___  | | | ',CR,LF
00003520= 7C 20 7C 20 20 20 ...   1544              DC.B   '| |   \ \ | |   | |   / /     | | | |   \ \| | | |   | |  | |   | | |_| ',CR,LF
0000356A= 7C 20 7C 5F 5F 5F ...   1545              DC.B   '| |___| | | |   | |  / /____  | | | |    \ | | |  \__| |  | |   | |  _  ',CR,LF
000035B4= 7C 5F 5F 5F 5F 5F ...   1546              DC.B   '|_______| |_|   |_| /_______| |_| |_|     \__|  \ _____/  |_|   |_| |_| ',CR,LF
000035FE= 23 23 23 23 23 23 ...   1547              DC.B   '########################################################################',CR,LF
00003648= 20 20 20 20 20 20 ...   1548              DC.B   '                                                      CSS422 DISSEMBLER ',CR,LF
00003692= 20 20 20 20 20 20 ...   1549              DC.B   '                                                                        ',CR,LF
000036DC= 20 20 20 20 20 20 ...   1550              DC.B   '                                                                        ',CR,LF
00003726= 20 20 20 20 20 20 ...   1551              DC.B   '                                                                        ',CR,LF
00003770= 20 20 20 20 20 20 ...   1552              DC.B   '                                                                        ',CR,LF
000037BA= 20 20 20 20 20 20 ...   1553              DC.B   '                                                                        ',CR,LF
00003804= 20 20 20 20 20 20 ...   1554              DC.B   '                                                                        ',CR,LF
0000384E= 20 20 20 20 20 20 ...   1555              DC.B   '                                                                        ',CR,LF
00003898= 20 20 20 20 20 20 ...   1556              DC.B   '                                                                        ',CR,LF
000038E2= 20 20 20 20 20 20 ...   1557              DC.B   '                                                                        ',CR,LF
0000392C= 20 20 20 20 20 20 ...   1558              DC.B   '                                                                        ',CR,LF,0
00003977                          1559  
00003977                          1560  
00003977                          1561              END         pgm_start           *End of program and load address

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
AD2ASCII_13         1862
AD2ASCII_14         188A
AD2ASCII_15         18C8
AD2ASCII_16         18F0
AD2ASCII_17         1926
AD2ASCII_18         194E
AD2ASCII_3          138A
AD2ASCII_31         1D1A
AD2ASCII_32         1D86
AD2ASCII_33         1DF8
AD2ASCII_34         1E36
AD2ASCII_35         1E5E
AD2ASCII_38         1F34
AD2ASCII_39         1F90
AD2ASCII_4          13B2
AD2ASCII_5          1492
ADD2ASCII           B3A
ADNUMBERS_13        1872
ADNUMBERS_14        189A
ADNUMBERS_15        18D8
ADNUMBERS_16        1900
ADNUMBERS_17        1936
ADNUMBERS_18        195E
ADNUMBERS_3         139A
ADNUMBERS_31        1D2A
ADNUMBERS_32        1D96
ADNUMBERS_33        1E08
ADNUMBERS_34        1E46
ADNUMBERS_35        1E6E
ADNUMBERS_38        1F44
ADNUMBERS_39        1FA0
ADNUMBERS_4         13C2
ADNUMBERS_5         14A2
ASCII_L_36          1EA8
ASCII_L_9           15D0
ASCII_W_37          1ED8
ASCII_W_7           153A
ASCII_W_8           1584
ASK_NEXT            1122
ASK_START           110A
BAD_FLAG            31CC
BEGINNING           1012
BOUND_NEXT          1282
BUFFER              3102
CASE_1              1FE6
CASE_2              2006
CASE_3              2016
CASE_4              2256
CASE_5              24C6
CASE_6              24D6
CASE_7              2746
CHECK_ADD           1098
CR                  D
DATA_XXXX           147E
DIS_TABLE           31D4
DXREG2ASCII         69C
DYREG2ASCII         812
D_CHOSEN1           1DD0
D_CHOSEN2           1FD2
EA2BUFFER           1C6C
EA2B_1              1C80
EA2B_2              1C94
EA2B_3              1CAC
EA2B_4              1CC8
EA2B_5              1CE6
EA2B_6              1D52
EA2B_7              1DE4
EA2B_7_1            1E1C
EA2B_7_2            1E82
EA2B_7_3            1F00
EA2B_7_4            1F64
EA_CHECK_28         1BCE
EA_EXIT             1C5A
EA_EXIT_2           1C66
EA_MOVE             1BE6
EA_MOVE_D           1C1A
EA_TABLE            2778
END_ADDR            30D6
END_CHOSEN1         111C
END_CHOSEN2         1158
END_CHOSEN3         127C
ENTER2CON           107A
EVEN_NUM_1          11D2
EVEN_NUM_2          1258
EXIT_IO             12D8
EXIT_OP             1B1A
E_A                 1B88
GOOD_DATA           1B7E
HEX_NEXT_1          11DA
HEX_NEXT_2          1260
ILLEGAL             1350
IMME_FLAG           31D0
INVALID             1330
IO_CODE             1100
IS_IT_4             1B50
IS_IT_6             1B62
IS_IT_7             1B74
JUMP_FLAG           31CE
LEGAL_CHECK         12BA
LF                  A
LOOP_1              13DA
LOOP_2              13EA
LOOP_3              13FC
LOOP_4              1418
LOOP_5              1434
LOOP_6              1446
LOOP_7              1462
LOOP_NUM            31CA
LOWERCASE_1         11A2
LOWERCASE_2         1228
L_2ASCII            1016
MASK_LOOP_1         1682
MASK_LOOP_2         1704
MASK_NEXT_1         16B2
MASK_NEXT_2         1734
MOVE_FLAG           31D2
NEWLINE             2D8C
NEXT_3_1            1526
NEXT_3_2            1570
NEXT_3_3            15BA
NEXT_3_4            1606
NEXT_3_5            16D6
NEXT_4_1            17B6
NEXT_4_2            17E8
NEXT_5_1            18AE
NEXT_5_2            1914
NEXT_6_1            19DE
NEXT_6_2            1A12
NEXT_6_3            1A46
NEXT_6_4            1A7A
NEXT_7_1            1AEE
NEXT_7_2            1B08
NOT_LONG            1ED0
NOT_PRE             167C
NO_SIGNBIT1         1D0A
NO_SIGNBIT2         1D76
NO_SIGNBIT3         1F24
NO_SIGNBIT4         1F80
NULL                2776
NUMBERBIT1          1D0E
NUMBERBIT2          1D7A
NUMBERBIT3          1F28
NUMBERBIT4          1F84
NUMBERS_L_36        1EB8
NUMBERS_L_9         15E0
NUMBERS_W_37        1EE8
NUMBERS_W_7         154A
NUMBERS_W_8         1594
ONE2SEVEN           19C4
OPENING             31D6
OP_CODE             1360
OP_LOOP             1054
OUT_OF_RANG         1340
OXREG2ASCII         94A
OYREG2ASCII         A61
PARSING_1           1279
PARSING_2           1686
PASSED_1            11AE
PASSED_2            1234
PGM_START           1000
RANGE_CHECK         12A8
READER              2D8E
READER2             2F1E
READ_AGAIN          10C0
R_COPY              1304
R_MASK_LOOP         1628
R_MASK_NEXT         1658
R_WRITE_A           1648
R_WRITE_NUM         164E
SET_AS_BAD          1C52
SKIP_IMME_1         150C
SKIP_IMME_2         1776
SKIP_IMME_3         1844
SKIP_IMME_4         19A0
SKIP_IMME_5         1AD4
STACK               A0000
START_ADDR          30AE
STRING1             2B58
STRING10            2D58
STRING2             2B7E
STRING3             2BA2
STRING4             2BE2
STRING5             2C28
STRING6             2C70
STRING7             2CB2
STRING8             2D02
STRING9             2D22
THE_END             10F6
TOO_LONG            1320
TOO_SHORT           12DE
TO_BUFFER_1         14B6
TO_BUFFER_2         14C0
TO_BUFFER_3         14DE
TO_BUFFER_4         1748
TO_BUFFER_5         1820
TO_BUFFER_6         1972
TO_BUFFER_7         1AA6
TO_HEX_1            11B8
TO_HEX_2            123E
VAL_CHECK           0
VAL_LOOP_1          116C
VAL_LOOP_2          11F2
VAL_NEXT            115E
VAL_START           1140
WELCOME             1006
WHICH_ADD           30FE
WRITE_A_1           16A2
WRITE_A_2           1724
WRITE_NUM_1         16A8
WRITE_NUM_2         172A
W_2ASCII            DB3
X_NUMBER1           1DD4
X_NUMBER2           1FD6
Z_ADDER             12F8
